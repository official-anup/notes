
1)diff between render and httpresponse :
---------------------------------------
-render is usually used to load a template and a context, while HttpResponse is usually for 
data. 
-As it's bad practice to "respond" with html. Render is essentially a shortuct for HttpResponse, 
-render provides a more effective way to modify templates, and load data dynamically.

-------------------------------------------------------------------------------------------------
HTTPS AND HTTP :
----------------
-In Django, handling HTTP (Hypertext Transfer Protocol) requests is the default behavior. 
-When a user accesses a Django application without explicitly using HTTPS, the request is 
considered an HTTP request.

-In Django, handling HTTPS (Hypertext Transfer Protocol Secure) requests involves configuring your 
web server to handle secure connections and ensuring your Django application is set up to work 
with HTTPS.

-------------------------------------------------------------------------------------------------
WHAT IS JINJA :
--------------
-Jinja is a powerful and widely used templating engine for Python web applications, including 
Django. 
-It provides a way to separate the presentation logic from the application logic by allowing you 
to define templates that contain placeholders and logic for rendering dynamic content.

-In Django, you can use Jinja as an alternative templating engine instead of Django's default 
templating engine. 

eg: pip install jinja 2

-------------------------------------------------------------------------------
WHAT IS REQUEST LIBRARY
-------------------------
-It is not a part of Django itself but is commonly used alongside Django for making HTTP requests 
to external APIs or web services.
-The requests library provides a simple and elegant API for sending HTTP requests and handling the 
corresponding responses in Python. 
-It abstracts away the complexities of making HTTP requests, handling headers, cookies, query 
parameters, authentication, and more.

-While Django has its own built-in mechanisms for handling HTTP requests through the request 
object, the requests library is often used in Django projects when interacting with external APIs 
or making requests to other web services that are not part of the Django application itself.

--------------------------------------------------------------------------------
WHAT IS REQUEST PARAMETER :
---------------------------
-In Django, the request library is not a standalone library but rather a part of the Django 
framework itself. 
-The request object is an integral part of handling HTTP requests in Django views.

-When a user makes an HTTP request to a Django application, Django creates a request object 
that contains information about the request. 
-This object provides access to various details of the request, such as the requested URL, 
request method (GET, POST, etc.), user session data, headers, and much more.

-------------------------------------------------------------------------------
HOW TO CREATE A CUSTOME MIDDLEWARE ?
------------------------------------
-

-------------------------------------------------------------------------------
Q)Synchronous :
----------------
-In Synchronous, when a Client makes a request to the server then he has to wait until he gets the 
response which means synchronous call blocks the client until operation completes.
-eg:Until a students gets a degree from a first college,he/she can't gets admission in any 
higher education.

Q)Asynchronous :
----------------
-In Asynchronous, when a Client makes a request to the server then he does not need to wait until 
he gets the response which means asynchronous call doesn’t blocks the client until operation 
completes.
-He is free to do other activities.
-eg:When we try to upload a video in yotube,and it takes time to upload and in this time we 
can do other activities like to add title or we can add description.

-------------------------------------------------------------------------------
Q)Why are QuerySets considered "lazy"?
------------------------------------------
-The results of a QuerySet are not ordered.
-QuerySets do not create any database activity until they are evaluated.
-QuerySets do not load objects into memory until they are needed.
-Using QuerySets, you cannot execute more complex queries.

-If you add a .filter(..) you make a new QuerySet. That queryset is lazy 
in the sense that it will not fire a query immediately, but when you force evaluation 

-------------------------------------------------------------------------------
Q)What are django channels ?
-----------------------------
-Django Channels extends Django's abilities beyond HTTP - to handle WebSockets, chat
protocols, IoT protocols, and more.

-Channels give you the choice to handle other connections in either a synchronous or
asynchronous style.

-It provides integrations with Django’s auth system, session system, and more, making it
easier than ever to extend your HTTP-only project to other protocols.

-Channels builds upon the native ASGI support available in djnago simce v3.0.


---------------------------------------------------------------------------------------
Q)WHAT IS DJANGO DB ROUTERS ?
------------------------------
-To connect different databases.
-Django database routers are a feature that allows you to control how Django accesses 
and interacts with multiple databases. 
-By defining database routers, you can specify which database should be used for reading 
and writing data for different models or apps in your Django project. 
-This gives you the flexibility to distribute data across multiple databases or integrate 
with existing database systems.


3 steps to setup routers:
-------------------------
1)Create a database router class by defining a Python class that inherits from 
django.db.router.BaseRouter. This class will contain the routing logic.

eg:# myapp/db_router.py
class MyAppDBRouter:
    def db_for_read(self, model, **hints):
        if model._meta.app_label == 'legacy':
            return 'legacy'
        return None

    def db_for_write(self, model, **hints):
        if model._meta.app_label == 'legacy':
             return 'legacy'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        return None

2)In your Django project's settings, specify the DATABASE_ROUTERS setting to point to your 
router class.

eg:# settings.py
DATABASE_ROUTERS = ['myapp.db_router.MyAppDBRouter']


3)Make sure to define the legacy database in your DATABASES setting.

eg:# settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'myapp',
        'USER': 'myuser',
        'PASSWORD': 'mypassword',
        'HOST': 'localhost',
        'PORT': '3306',
    },
    'legacy': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'legacydb',
        'USER': 'legacyuser',
        'PASSWORD': 'legacypassword',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

----------------------------------
-A database Router is a class that provides up to four methods:
1)db_for_read(model, **hints)
-Suggest the database that should be used for read operations for objects of type model.

2)db_for_write(model, **hints)
-Suggest the database that should be used for writes of objects of type Model.

3)allow_relation(obj1, obj2, **hints)
-Return True if a relation between obj1 and obj2 should be allowed, False if the relation 
should be prevented, or None if the router has no opinion. This is purely a validation operation, 
used by foreign key and many to many operations to determine if a relation should be allowed between 
two objects.

4)allow_migrate(db, app_label, model_name=None, **hints)
-Determine if the migration operation is allowed to run on the database with alias db. Return True 
if the operation should run, False if it shouldn’t run, or None if the router has no opinion.
-The app_label positional argument is the label of the application being migrated.
-hints are used by certain operations to communicate additional information to the router.


-------------------------------------------------------------------------------------------------
Q)HOW TO USE DRF ?
----------------
1)Install DRF, something like pip install djangorestframework
2)Add rest_framework to your INSTALLED_APPS
3)Define your serialisers, views and routes.

-------------------------------------------------------------------------------------------------
Q)What is django models ?
-------------------------
-In Django, a model is a class which is used to contain essential fields and methods. 
-Each model class maps to a single table in the database.

-Django Model is a subclass of django.db.models.Model and each field of the model class represents 
a seaprate database field (column).

-Model is defined in Models.py file. This file can contain multiple models.

types:
--------
-DeleteModel(name) - It deletes the model from the project history and its table from the database.

-RenameModel(old_name, new name) — It renames the model from an old name to a new one.

-You may have to manually add this if you change the model's name and quite a few of its fields at 
once to the autodetector, this will look ike you deleted a model with the old name and added new one 
with a different name, and the migration i creates will lose any data in the ok table.

-AlterModel Table(name, table) - It changes the model's table name (the db_table option on the Meta
Subclass).

-AlteUnique Together(uame, unique_together)- It changes the model's set of unique constraints 
(the.unique_together option on the Meta subclass).

-Alterlndex Together(name, index._together) - It changes the models set of custom indexes (the
nde. together option on the Meia subclass).

-AlterOrderWithRespectTo(name, order_with_respect_to) — It makes or deletes the _order column 
needed for the order, with 1¢spect, $0 option or the Meta subsluns.

-AlterModelOptions(name, options) - It stores changes to miscellaneous model optians (settings on
model's Meta) lke permissions and verbose_name. Does not affect the database, but persists these
changes for RunPython nstasees © use, options should be dictionaey mapping option naunes 0 values,

-AlterModelManagers(name, managers) - It alters the managers that are available during migrations.


-------------------------------------------------------------------------------------------------
Q)Difference between Aggregate and Annotate functions in django queryset ?
---------------------------------------------------------------------------
-Aggregate calculates values for the entire queryset or one column. 


-Annotate calculates summary values for more than one column.
-If we annotate the student age then it will return the how many students are there of 20 age and 
how many students are of 23 and more.
-eg:result :student_age=20 and count is 15

from django.db.models import Count
from myapp.models import Post

# Retrieve all posts and annotate each post with the count of comments
posts = Post.objects.annotate(comment_count=Count('comments'))

# Access the annotated value for each post
for post in posts:
    print(f"Post: {post.title}, Comment Count: {post.comment_count}")


-In Django, the annotate() function is used as a QuerySet method to add annotations to the 
query results.
-The annotate() function allows you to add extra information or calculations to each object 
in the queryset. 
-It is used in conjunction with aggregations or other database functions to provide additional 
data in the query results.

-------------------------------------------------------------------------------------------------
Q)What is Sharding?
-----------------
-Sharding is a way of horizontally partitioning your data by storing different rows of the same 
table in multiple tables across multiple databases. 

-------------------------------------------------------------------------------------------------
Q)Inspect DB ?
-----------------
-It creates models based on the existing database.

-------------------------------------------------------------------------------------------------
Clickjacking Protection :
-------------------------

-The clickjacking middleware and decorators provide easy-to-use protection against clickjacking. 
-Fake page over actual page.
-This type of attack occurs when a malicious site tricks a user into clicking on a concealed element 
of another site which they have loaded in a hidden frame or iframe.

-Modern browsers honor the X-Frame-Options HTTP header that indicates whether or not a resource is 
allowed to load within a frame or iframe.

MIDDLEWARE = [
    ...,
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ...,
]

------------------------------------------------------------------------------
Cryptographic signing :
----------------------
-It helps to send data through unauthorised channel or server,and it detectes if the
tempering will happen.

-When you create a new Django project using startproject, the settings.py file is generated 
automatically and gets a random SECRET_KEY value. This value is the key to securing signed data.
-it is vital you keep this secure, or attackers could use it to generate their own signed values.

------------------------------------------------------------------------------
Security middleware :
--------------------
-Security Middleware provides several security enhancements to the request/response cycle. 
-Each one can be independently enabled or disabled with a setting.

------------------------------------------------------------------------------
Time zones :
-----------
-This is handy if your users live in more than one time zone and you want to display datetime 
information according to each user’s wall clock.
-Time zone support is disabled by default. 

-To enable it, set USE_TZ = True in your settings file.


------------------------------------------------------------------------------
Geographic framework :
----------------------
-GeoDjango intends to be a world-class geographic web framework.

------------------------------------------------------------------------------
SERIALIZATION:
-------------
-Mechanism for “translating” Django models into other formats.
-In shorts serialization converts a python code into byte formate so that it can 
used to send over the networks.

------------------------------------------------------------------------------
Unicode in Django :
-----------------
-Other than ASCII.
------------------------------------------------------------------------------

------------------------------------------------------------------------------

=================================================================================

RECENT INTERVIEW QUESTIONS :
--------------------------
Q)What are signals ?
-------------------
-Signals are used to perform any action on modification of a model instance. 
-The signals are utilities that help us to connect events with actions. We can develop a 
function that will run when a signal calls it. 
-In other words, Signals are used to perform some action on modification/creation of a 
particular entry in Database. 
-For example, One would want to create a profile instance, as soon as a new user instance is
created in Database.

-There are 3 types:
--------------------
1)pre_save/post_save: 
---------------------
-These signals will invoke a function either before the instance of a model 
is created or after the instance of the model is created.

2)pre_delete/post_delete: 
-------------------------
-These signals will invoke a function either before the instance of a model is deleted or after 
the instance of the model is deleted.

3)pre_init/post_init: 
---------------------
-These signals invoke a function after instantiating a model, for example, using the __init__() 
function.

-------------------------------------------------------------------------------------
Q)Abstract base class ?
-----------------------
-Abstract Base Class are useful when you want to put some common information into a number of
other models. 
-You write your base class and put abstract = True in the Meta Class.

class common(models.Model):  # COMMON
    name = models.CharField(max_length=100)
  
    class Meta:
        abstract = True

-------------------------------------------------------------------------------------
Q)What is model Inheritance?
----------------------------
-Model inheritance in Django refers to the ability to create new models based on existing models, 
allowing the new models to inherit fields and behavior from their parent models. 

-Django supports 3 TYPES of model inheritance: abstract base classes, multi-table inheritance, 
and proxy models.

1)Abstract Base Classes:
-------------------------
-An abstract base class is a model that is not meant to be instantiated or saved to the database.
-It serves as a base for other models by providing common fields and methods.
-Fields and methods defined in an abstract base class are inherited by its child models, which 
can add additional fields or override existing ones.


2)Multi-table Inheritance:
--------------------------
-Multi-table inheritance creates a relationship between a parent model and one or more child models.
-Each model is stored in its own database table and can have its own fields and methods.
-Child models inherit all fields and methods from the parent model and can add or override them.


3)Proxy Models:
-----------------
-Proxy models are models that inherit from an existing model but don't create a new database table.
-They provide an alternative interface to the original model, allowing you to add or override methods
without modifying the parent model.
-Proxy models are useful when you want to change the behavior of a model without altering its fields 
or creating a separate table in the database.
-Model inheritance in Django allows for code reuse, modular design, and the ability to define common 
functionality in a central place. 
-It provides flexibility in creating models with varying levels of shared attributes and behaviors, 
depending on your application's requirements.

-------------------------------------------------------------------------------------
Q)Proxy models:
---------------- 
-Proxy models allow us to change the python behaviour of a model without changing the 
database.

-In Django, a proxy model is a type of model that is derived from another model, known as 
the "parent" model. 
-It allows you to create a new model that has the same fields and behavior as the parent model, 
but can be treated as a separate entity in the database.

-Proxy models are particularly useful for implementing complex inheritance hierarchies 
or adding extra functionality to existing models without modifying their underlying structure.

-Proxy models are defined by creating a new model class that inherits from the parent model 
and setting the "Meta.proxy" attribute to "True". 
-This indicates that the new model is a proxy model and should use the same database table as 
the parent model.

-------------------------------------------------------------------------------------
Q)
-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
=========================================================================================
IMPORTANT COMMANDS :
--------------------

-pip install django

-py -m django --version

-pip freeze ,To see what we have installed earliar.

-If you want to change the server's IP, pass it along with the port, use:
python manage.py runserver 0.0.0.0:8000

-Display SQL Statement
 python manage.py sqlmigrate application_name dbfile_name
-here db_file name is 0001_initial.py

-By default, this command starts the development server on the internal IP at port  8000,
-If you want to change the server's port, pass it as a command-line argument.
For instance, this command starts the server on port 8080:
  cmd :python manage. py runserver 8080

-To see all migrations, execute the command,
python manage.py showmigrations

-Command to view a database schema based an existing (or legacy) database:
python manage.py inspectdb

-Django Command To View All Items In A Model
Users.objects.all()
-where "User” is model name.

-Django Command To Filter Items In A Model:
Users.objects.filter(name="Nitin")
-where “User" is a model name.

-Django Command To Get A Particular Item In A Model
Users.objects.get(id=25)
-where “User” bs model name.

-QuerySet To Delete An Object:
Users.objects.filter(id= 54).delete()

-QuerySet To Update An Object:
var_name= User.objects.get(pk = 3)
var_name= "Pune"
var_name.save()

-QuerySet To Insert/Add An Object:
new_user = User(name = "Nitin Mangotra", city="Gurgaon")
new_user.save()


-py manage.py changepassword - offers a method to change the user's password.

-py manage.py createsuperuser - Creates user account with all permissions (also known as superuser
account).

-py manage.py showmigrations - Shows all migrations present in the project.

-py manage.py makemigrations - Generates new migrations as per the changes detected to your models.

-py manage.py migrate - Executes SQL. commands after which the database state With the current set of
models and migrations are synchronized.

-py manage.py sqlmigrate - Prints the SQL statement for the named migration.

-py manage.py inspectdb - It generates django models from the existing database tables.

-py manage.py sqlflush - Prints the SQL statements that would be executed for the flush command 
mentioned above.

-py manage.py shell - Starts the Python interactive interpreter.

-py manage.py dumpdata - Used to the dumpdata from the database.

-py manage.py flush - Flush all values from the database and also re-executes any post - synchronization
Handlers specified in the code.

-py manage.py loaddata - loads the data into the database from the fixture file.

-py manage.py makemessages - Used for translation purpose and it generates a message file too.

-
================================================================================================
Framework is  a set of rules,ideas or beliefs which you use in order to deal
with problems or to  decide what to do.
===============================================================
-Django is a high level web apllication framework that enables rapid developents 
of web application.
-open source
-fallows model view template(MVT) architectural pattern.
-fast and simple
-secure ie.authentication with payment gateway.
-it suits many web apllication project
-its well established..ie. works on MVT pattern.
-MVT supports
-buit in auhtentication and athorisation
-packaging system,can install various packages..or we can write logic separatly
-
------------------------------------------------------------------------------
MVT:
----
m:models ie models.py,we write here database logic,act as an interface of your data
v:views..views.py...there is a bussiness logic,what u see when u render a website
    TWO TYPES:
     --------
     1)class based views
     2)function based views
t:template..in html...this is presentation logic,a template consist of static parts
  of desired html output as 


-
===========================================================================================
Q)Flow of django 
-----------------
-When a user hit the request then this request goes to the django server and then urls executes,which
then pass to the views.py where the bussiness logic happens.
-If request demands data from DB then models.py executes and returns the data to the user
-If the request is for the template them views.py render the templates to the user.

----------------------------------------------------------------------------------------
Q)How request is processed in django?
-----------------------------
-Whatever the request is made,it has to be handled by manage.py file
-Then it routes to the setting.py file
-Then urls.py executes
-Then views.py executes regarding that particular urls
-Then it routes to the model.py
-And finally and response goes to the templates.

-------------------------------------------------------------------------------------
Q)which Databases Are Supported By Django?
-----------------------------------------
-PostgreSQL
-MySQL
-sQLite
-Oracle

-Apart from these, Django also supports databases such as ODBC, Microsoft SQL Server,
IBM DB2, SAP SQL Anywhere, and Firebird using third-party packages.

-NOTE:Note: Officially Django doesn’t support any No-SQl. databases.
 
-----------------------------------------------------------------------------------
Q)What Is The Django Shortcut Method To More Easily
Render An HTML Response?
----------------------------------
-Django shortcut method to more easily render an html response is:
"render_to_response"

----------------------------------------------------------------------------------
Q)What Is The Difference Between Authentication And
Authorization?
-------------------------------------------------------
-Authentication:
----------------
-Authentication is the process of verifying the identity of a user. 
It determines whether a user is who they claim to be. When a user attempts to access a protected resource 
or perform an action, they need to authenticate themselves by providing valid credentials, such as a 
username and password.


Authorization :
----------------
-Authorization, also known as access control, is the process of determining what actions a user is allowed 
to perform and what resources they have permission to access. 
-It ensures that authenticated users have appropriate privileges based on their roles or permissions.

-------------------------------------------------------------------------------------
---------------------------------------
-Django is a Python's framework which Is easy to learn.
-Django follows the DRY or the Don't Repeat Yourself Principle which means, one concept or a piece 
of data should live in just one place.
-Django Offers Better CDN connectivity and Content Management.
-Diango is a Batteries Included Framework.
-Django Offers Rapid-development.
-Django is highly Scalable.
-Django provides High Security.
-Django facilitates you to divide code modules into logical groups to make it flexible to change.
-Django provides auto - generated web admin to make website administration easy.
-Django provides template system to define HTML template for your web page to avoid code duplication.
-Django enables you to separate business logic from the HTML.

-Django is Monolithic. You must know the full system to work with it.
-Django's monolithic size makes it unsuitable for smaller projects.
-Everything must be explicitly defined due to a lack of convention.
-Django's modules are bulky,
-Django is completely based on Django ORM.
-Components are deployed together.

-----------------------------------------------------------------------------------------------
Q)What Is The Django Shortcut Method To More Easily Render An HTML Response?
-render__to_ response’

-------------------------------------------------------------------------------------
Q)What is token based authorization ?
------------------------------
-A token based authentication system is a security system that authenticates the users who
attempt to log into a server, a network, or some other secure system, using a security token
provided by the server.

-------------------------------------------------------------------------------------
Q)What is django.shortcuts.render function?
-----------------------------------------
-Render function is a shortcut function that lets the developer easily pass the data dictionary with 
the template.

-When a view function returns a webpage as HttpResponse instead of a simple string, we use render().

-This function then combines the template with a data dictionary via templating engine.
-Finally, this render() returns as HttpResponse with the rendered text, which is the data returned by
models.
-Thus, Django render() bypasses most of the developer's work and lets him use different template 
engines.

BASIC SYNTAX:
-------------
render(request, template_name, context-None, content_type-None, status-None, using-None)

-The request is the parameter that generates the response.
-The template name is the HTML template used.
-The context is dict of the data passed on the page from the python.
You can also specify the content type.The status of the data you passed,And the render you are 
returning.

-------------------------------------------------------------------------------------
Q)Explain Q objects in Django ORM?
--------------------------------
-Q object django.db.models.Q.is an object to encapsulate a collection of keyword
arownents specified as FIELD LOOKUPS.
-Q objects are used to write complex queries, as in filter() functions just "AND" the
conditions while if you want to "OR" the conditions you can use Q objects.

example:

from django.db import models
from django.db.models import Q
Models.objects.get(Q(question_startswith-'When'),Q(answer_startswith-'n')|Q(answer_startswith-'At"))
-Q Objects can be combined with the help of the | and & operators to get a new Q Object.

-This is equivalent to the following SQL WHERE Clause:
SELECT * FROM Model WHERE, question LIKE, 'When' And (answer-"On%" OR answer-"At%")




-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
Q)What is the difference between the project and the app?
--------------------------------------------
-A Project is the entire Django application and an App is a module inside the project that
deals with one specific use case.

For Example: - payment system(app) in the eCommerce app(Project)

-An App is basically a web Application that is created to perform a specific task.
-A project, on the other hand, is a collection of these apps.
-Therefore a single project can consist of "n" number of apps and a single app can be in
multiple projects.

--------------------------------------------------------------------------------------
Q)Folder strucure of the django project
-------------------------------------
-project_name/
   manage.py
   project_name/
        __init__.py
        settings.py
        urls.py
        wsgi.py
        
-manage.py: A command-line utility that allows you to interact With your django project and this file 
used to contol your Django project on the server even to begin one.

- _init__py: An empty that tells Python that the curent
directory should be considered a Python package

-settings.py: Comprises the configurations of the current project like Db and middlewares etc.

-urls.py : All the URLS of the project are present here.

-wsgi.py: This is an entry point for your application which is used by the web servers to serve 
the project you have created.

--------------------------------------------------------------------------------------
Q)Folder strucure of the django app
-------------------------------------
-demoapp/
   __init__.py
   admin.py
   apps.py
   migrations/
       __init__.py
   models.py
   tests.py
   views.py

- __init__py - An empty file that tells Python that the current directory should be considered as a
Python package.

-admin. py: Reads model metadata and provides an interface to manage app content.

-apps.py :Application configuration details for the app are included.

-migrations: Contains migrated model details with the corresponding database table structure.

-models.py: A class for each model is defined with the model structure layout.

-tests.py: App unit test automation classes are included in this.

-views.py: Web based requests and response is configured in this file

-------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------
Q)Why django Is Called A Loosely Coupled Framework?
------------------------------------------------
-Django is called a loosely coupled framework because of its MVT architecture, which is a
variant of the MVC architecture.
-MVT helps in separating the server code from the client - related code.
-Django’s Models and Views are present on the server machine and only templates return to
the client, which are essentially HTML, CSS code and contains the required data from the
models.
-These components are totally independent of each other and therefore, front-end
developers and backend developers can work simultaneously on the project as these two
parts changing will have little to no effect on each other when changed.
-Therefore, Django is a loosely coupled framework.

------------------------------------------------------------------------------------------
Q)What is Django ORM?
--------------------
-ORM stands for Object-relational Mapper.
-This ORM enables us to interact with databases in a more pythonic way like we can avoid
writing raw queries.
-It is possible to retrieve, save, delete and perform other operations over the database
without ever writing any SQL query.
-It helps us with working with data in a more object-oriented way.

eg:
Let's consider a simple SQL. Query where Employee table to retrieve a employee name.
Select * from EMPLOYEE where name = "Nitin";

The Equivalent Django ORM query will be:
emp = employees.objects.filter(name='Nitin')

employees = Employee.objects.filter(salary__gt=45000)

----------------------------------------------------------------------------------
Q)What is csrf token?
----------------------
-CSRF stands for Cross Site Request Forgery.
-The csrf_token is used for protection against Cross- Site Request Forgeries.
-In other words it protects the post reuqest from the user when we used the form.
-CSRF tokens can prevent CSRF attacks by making it impossible for an attacker to construct
a fully valid HTTP request suitable for feeding to a victim user.

----------------------------------------------------------------------------------
Q)What Is A QuerySet In Django?
-------------------------------
-Queryset is a collection of SQl queries.
-A QuerySet in Django is basically a collection of objects from our database.
-QuerySets are used by the Django ORM. When we use our models to get a single record or a
group of records from the database, they are returned as QuerySets.
-It is comparable to a database select operation.
Eg :
users.objects.all()
users.objects.filter(name="nitin")
users.objects.get(id=3)

----------------------------------------------------------------------------------
Q)What Is The Difference Between Emp.object.filter(),Emp.object.get() & Emp.objects.all() in Django 
Queryset?
------------------------
1)Emp.objects.all():
-In order to view all the items from your database, you can make use of the ‘all()’ function as
mentioned below :
 Users.objects.all()
-Users is class of models.py file

2)Emp.object.filter() & Emp.object.get():
-To fiter out some element from the database, you either use the get() method of the filter() method 
as follows:
   Users.objects.filter(name="Nitin")
   Users.objects.get(name="Nitin")

-Basically use get() when you want to get a single unique object, &
-filter() when you want to get all objects that match your lookup parameters

-get() throws an error if there's no object matching the query.
filter() will return an empty queryset.

----------------------------------------------------------------------------------
Q)How static files are defined in django ? and Explain its configuration and its usage.
--------------------------------------------
-Websites generally need to serve additional files such as images,Javascript or CSS. 
-In Django, these files are referred to as “static files”.
-Apart from that Django provides django.contrib.staticfiles to manage these static files.

-These files are created within the project app directory by creating a subdirectory named
as "static".
-Static files are stored in the folder called static in the Django app.

CONFIGURATION :
-----------
-Ensure that django.contrib.staticfiles is added to your INSTALLED_APPS
-In your settings file. define STATIC_URL for ex.
   STATIC URL = "/static/'

-In your Django templates, use the static template tag to create the URL for the given
relative path using the configured STATICFILES_ STORAGE.
    {% load static %}
   <img src="{% static 'my_app/example.jpg’ %}" alt="My image">

-Store your static files in a folder called static in your app.
     my_app/static/my_app/example.jpg

----------------------------------------------------------------------------------
Q)What Is The Difference Between Flask, Pyramid And
Django?
---------------------------------------
-FLASK is a "microftamework” primarily build for small aplication with simpler
requirements. 
-In flask, you have to use external libraries. Flask is ready to use.

-PYRAMID are build for larger applications. It provides flexibility and lets the developer use the
Right tools for thier project, The developer can choose the database, URL Structure, templating
style and more. Pyramid is heavy configurable.

-Django can also used for larger applications. It includes an ORM.

----------------------------------------------------------------------------------
Q)Explain Django Admin & Django Admin Interface.
--------------------------------------------
-Django admin panel is a kind of graphical user interface that is used for administrative tasks.
-Django comes with a fully customizable in-built admin interface.
-You get the quick setup of the admin panel to manage your data and to access it.

-To use a database table with the admin interface, we need to register the model in the admin.py 
file.
-The development process becomes faster and also it becomes easy for the developers to perform
administrative activites.

-The application Django admin is imported from the django.contrib.package.
-This imported application is also expected to get control by the corresponding organization hence 
it does not require an additional front end.

ADVANTAGES :
---------
-Authorization access.
-Managing multiple models
-Content management system

----------------------------------------------------------------------------------
Q)What Is The Significance Of manage.py File In Django?
------------------------------------------------
-The manage.py file is automatically generated whenever you create a project.
-This is basically a command-line utility that helps you to interact with your Django
project in various ways.

-It does the same things as django-admin but along with that, it also sets the
DJANGO_SETTINGS MODULE environment variable in order to point to your project's
settings.

-When Django server is started, the manage.py file searches for settings.py file, which
contains information of all the applications installed in the project, middleware used,
database connections and path to the main urls config.

----------------------------------------------------------------------------------
Q)What Is The Use Of The “include” Function In The
urls.py File In Django?
--------------------------------
-As in Django there can be many apps, each app may have some URLs that it responds to.
-Rather than registering all URLs for all apps in a single urls.py file, each app maintains
its own urls.py file, and in the project's urls.py file we use each individual urls.py file of
each app by using the include function.

eg:from django.urls import include

----------------------------------------------------------------------------------
Q)What Is The Use Of The “{% include %}” Function In Django ?
--------------------------------------------------------------
-It loads a template and renders it with the current context.
-This is a way of “including” other templates within a template,
-The template name can either be a variable or a hard-coded (quoted) string, in either
single or double quotes.

sty:{% include "template_name.html" %}

----------------------------------------------------------------------------------
Q)What Is Django Rest Framework(DRF)?
----------------------------------
-Django Rest Framework (DRF) is a powerful module for building web APIs.
-The Django Rest Framework (DRF) is a framework that helps you quickly create RESTful Api's.

-It's very easy to build model -backed APIs that have authentication policies and are browsable.

-RESTful APIs are perfect for web applications since they use low bandwidth and are
designed such that they work well with communications over the Internet like GET,POST, PUT. etc,

-DRF is especially useful if we have an existing Django web application and we wish to
quickly generate an API for it.

significant reasons
-------------
-Web browsable API
-Serialization
-Authentication policies
-Extensive documentation and excellent community support.
-Perfect for web apps since they have low bandwidth

----------------------------------------------------------------------------------
Q)What Is A Middleware In Django?
-------------------------------
-Middleware is something that executes between the request and response.
-In simple words, you can say it acts as a bridge between the request and response.
-Middleware in the Django framework is the component that operates on request and transfers
 it to the view and before passing it to the template engine, it starts operating on a response.
-Django provides various built - in middleware and also allows us to write our own middleware.

Some usage of Middlewares in Django is:
-Session management,
-Use authentication
-Cross-site request forgery protection(CSRF)
-Content Gzipping.
-Crypto signing
-Clickjacking protection using XFrameoptionMiddleware.

----------------------------------------------------------------------------------
Q)What Is Sessions In Django?
--------------------------
-Using the session framework, you can easily store and retrieve arbitrary data based on
the per-site-visitors.
-This framework basically stores data on the server-side and takes care of sending and
receiving cookies.

-These cookies consist of a session ID but not the actual data itself unless you explicitly
use a cookie-based backend.
-A session is a mechanism to store information on the server side during the interaction
with the web application

-By default,session stores in database and also allows file based and cache based
sessions.

----------------------------------------------------------------------------------
Q)What Is Context In Django?
---------------------------
-A context in Django is a dictionary, in which keys represent variable names and values
represent their values. 
-This dictionary (context) is passed to the template which then uses
the variables to output the dynamic content.


----------------------------------------------------------------------------------
Q)What Are Django Exceptions?
-------------------------
-An exception is an abnormal event that leads to program failure. 
-Django uses its exception classes and python exceptions as well to deal with such situations.

1)Django exception classes:We define Django core exceptions in "Django core.exceptions”.
-AppRegistryNotReady: This class raises for using models before loading the app process.

-Object DoesNotExist: It's a base class for DoesNotExist exceptions.

-EmptyResultSet: This exception arises when the query fails to return results.

-FieldDoesNotExist: When the requested file does not exist, this exception arises.

-MultipleObjectsReturned: It raises by the query multiple objects returned when we expect only one 
object.

-SuspiciousOperation: It raises when the user has performed some operation, which is considered 
suspicious from a security perspective.

-PermissionDenied: It arises when a user does not have permission to execute a specific action 
requested.

-ViewDoesNotExist: When the requested view does not exist, this exception raises.

-MiddlewareNotUsed: When there is no middleware in server configuration, this exception arises.

-ImproperlyConfigured: When Django configuration is improper, this exception arises.


-FieldError: When there is a problem with the model field, this exception arises.

-ValidationError: It raises when data validation fails.

2) Django URL Resolver Exceptions: These exceptions are defined in django.urls module.
-Resolver404: This exception raised when the path passed to resolve() function does not map to a view.

-NoReverseMatch: It is raised when a matching URL in your URLconf cannot be identified based on the 
parameters supplied.

3) Django Database Exceptions: The following exceptions are defined in django db module.
-DatabaseError: It occurs when the database is not available.
-IntegrityError: It occurs when an insertion query executes.
-Dataerror: It raises when data related issues come into the database.

4) Django Http Exceptions: The following exceptions are defined in django http module.
-UnreadablePostError: It is raised when a user cancels an upload.

5) Django Transaction Exceptions: The transaction exceptions are defined in django db transaction.
-TransactionManagementError: It s raised for any and all problems related to database transactions.

----------------------------------------------------------------------------------
Q)Explain How You Can Use File Based Sessions?
------------------------------------------
-To use the file-based sessions, you need to set the SESSION_ENGINE settings to
       "django.contrib.sessions.backends.file"

----------------------------------------------------------------------------------
Q)What Are Generic Views?
--------------------------
-Generic views are a set of commonly used patterns.
-They're built on top of the APIView class.


from rest_framework.generics import GenericAPIView


----------------------------------------------------------------------------------
Q)What are mixins ?
----------------------------------------------------
-Mixins are a way of reusing view logic in the Django REST framework. 
-They are classes that provide a specific functionality, such as authentication or pagination, 
that can be easily added to any view by including them as a base class. 

-Mixins are typically used with the APIView or GenericAPIView classes to create views with specific 
functionality.

from rest_framework.generics import GenericAPIView
from rest_framework.mixins import ListModelMixin

-eg:DetroyModelMixin ,UpdateModelMixin ,RetreiveModelMixin ,CreateModelMixin ,ListModelMixin

----------------------------------------------------------------------------------
Q)Explain The Caching Strategies In The Django?
---------------------------------------------
-Caching refers to the technique of storing the output results when they are processed
initially so that next time when the same results are fetched again, instead of processing
again those already stored results can be used, which leads to faster accessing as well as
less resource utilization.

-Django provides us with a robust cache system that is able to store dynamic web pages so
that these pages don’t need to be evaluated again for each request.

-----------------------------------------------------------------------------------
Q)Caching Strategies In The Django :
-------------------------------------
-In Django, you can utilize caching techniques to improve the performance and scalability 
of your web application. 
-Django provides built-in support for caching through its caching framework. 

Here are some caching techniques you can use in Django:

1)Template Fragment Caching: 
----------------------------
-Django allows you to cache specific parts of your templates, known as template fragments. 
-By wrapping the desired template code with the {% cache %} template tag, you can cache the 
rendered output for a specified duration. 
-This is useful when you have parts of your templates that are expensive to render but don't 
change frequently.

2)Database Query Caching:
--------------------------
- Django's ORM provides a caching mechanism for database query results. 
-By using the cache() method on querysets, you can cache the results of a query for a specified 
time. 
-Subsequent identical queries can then be served from the cache instead of hitting the database, 
improving response times.

3)View Function Caching: 
-------------------------
-You can apply caching to entire views or specific view functions using the cache_page decorator. 
-This decorator caches the entire rendered response of a view for a specified duration. 
-It is useful when you have views that generate static or semi-static content that doesn't change 
frequently.

4)Low-Level Cache API:
-------------------------
- Django's caching framework also provides a low-level cache API that allows you to cache arbitrary
Python objects. 
-You can use functions like cache.get() to retrieve data from the cache, cache.set() to store data 
in the cache, and cache.delete() to remove items from the cache. 
-This API gives you more flexibility to cache custom data or perform fine-grained caching.

5)Cache Middleware: 
--------------------
-Django includes a cache middleware that allows you to cache entire pages based on the request 
URL. 
-The middleware checks if a cached version of the requested page exists and serves it directly 
without executing the view function or hitting the database. 
-This can significantly improve the performance of frequently accessed pages.

6)Cache Invalidation: 
---------------------
-To ensure data consistency, you need to invalidate or update cached items when relevant changes 
occur in your application. 
-Django provides various ways to invalidate the cache, such as using the cache.clear() function 
to flush the entire cache or using cache keys to selectively invalidate specific items.

7)Cache Backend Options: 
------------------------
-Django supports multiple cache backends, such as in-memory caching, file system caching, or using 
external caching systems like Memcached or Redis. 
-You can configure the cache backend in your Django settings to choose the appropriate caching 
mechanism based on your application's requirements and infrastructure.

----------------------------------------------------------------------------------
Q)What should be done in case you got a message saying “Please enter the correct username and
password” oven after entering the right details to log into the admin section?
-----------------------------------------------------------
-Do the following if you have entered the right details but still not able to login to the admin site:

Set is_active and is_staff to True

----------------------------------------------------------------------------------
Q)Does Django support multple-column Primary Keys?
-No
----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------

----------------------------------------------------------------------------------
====================================================================================
----------------------------------------------------------------------------------
1)python -m venv my_env
2)my_env\Scripts\activate.bat
3)pip install django
4)(my_env)c:Django-admin startproject myfirstproject
5)(my_env)c:cd myfirstproject
6)(my_env)c:project_name\>py manage.py startapp demoapp
7)(my_env)c:project_name\>py manage.py runserver

==============================================================================
URLSs(Routes):
-------------
1)http://www.mysite.com ==> show satting page
2)http://www.mysite.com/blog/ ==> show list of all posts
3)http://www.mysite.com/blog/singlepost ==> show special post
============================================================================
DYNAMIC ROUTES:
--------------
-CAN FORM WITH IN WAYS
1)INT BASIS

2)STR BASIS

3)SLUG ABSIS:
-eg: hello-ws--iip
============================================================================
GET method:
----------
-GET method runs bydefult.
-This method sends the encoded user info appended to the page request.
-The page and the encoded info are separated by the ? charecter.
-It is restricted to send upto 1024 charecters only.
-Never use GET METHOD if you have password or other sensitive info.
bcz GET sends data in URL bt url is not secure,it can be see by anyone.
-Cannot be used to send binary data,like imgaes or word documenets
to the server.
----------------------------------------------------------------------
POST METHOD:
------------
-POST METHOD transfer info via http headers.The info is encoded as 
described in case of GET METHOD and put into a header called QUERY_STRING.
-Does not have any restriction on data size to be sent
-Can be used to send ASCII as well as binary data.
-The data sent by POST METHOD goes through HTTP header so security depends
on HTTP protocol.
-By using secure HTTP you can make sure that your info is secure.
      

=============================================================================
-C:\Users\91766\Desktop\virtual_Env\Django>my_env\scripts\activate.bat
-startproject
-cd project name
-startapp
-runserver
-py manage.py migrate
-py maange.py createsuperuser
        -username-->pass-->confirm pass-->
-in vscode:
----------
1)in models.py
   class Student(models.Model):
    name=models.CharField(max_length=200)
    roll=models.IntegerField()    
    marks=models.IntegerField()
    
    def __str__(self):
        return self.name

2)in terminal:py manage.py makemigrations,-->ye initioal001 ka table bnati h

3)py manage.py migrate

4)then check in sqlite..table is created

5)In admin.py:
-------------
-from django.contrib import admin
from demoapp.models import Student

admin.site.register(Student)


6)makemigrations
=========================================================================
-one python model class == one table in data base
-one field in model class== one column in table
-one object of model class ==one row in table
-for each table in database djangho will create id column as primary key
-all concept of oops is same in django as well.

----------------------------------------------------------------------------
tablename:appname_classname
-----------------------------------------------------------------------------
-makemigration will convert python code(ie. models) into sql code.
-migrate will create table in db.

---------------------------------------------------------------------------
=============================================================================
*Django API to execute django orm query 
------------------------------------------
A)to open Django API:
1)cmd:py manage.py shel
 1)open shell
 2)import model_class
        from appname.models import model_class
        eg:from demoapp.models import Student

 3)how to add data to the database table?
  -->by creating objects of model_class and save this object by using save method
     
     obj_ref=ClassName(args)
     eg:s1=Student(4,"Pratiksha",4,99)
     obj_ref.save()
 4)fetch all data from data base:
    -->by using all() method
      all() method will return list of all objects present in the given database table.
      
     var_name=ClassName.objects.all()
     eg: data=Student.objects.all()
          print(data)  
        
        1)for i in data:
               print(i)

  5)fetch single data:by using get()  method

   -->var_name=ClassName.objects.get(column_name=value)

        eg:data=Student.objects.get(roll=1)            
            >>> print(data)
  
  6)update data:
  --> var_name=ClassName.objects.get(column_name=value)
      var_name.column_name1=updated value
      var_name.column_name2=updated value
      var_name.save()

      eg: data=Student.objects.get(roll=1)            
          >>> print(data)
         data.marks=101
         >>> data.save()
  
  7)delete existing data:
  --->var_name=ClassName.objects.get(column_name=name)
      var_name.delete()

  8)filter objects from data:
   ---> var_name=ClassName.objects.filter(column_name__gt=value) 

        eg:1)data=Student.objects.filter(name__endswith="p")
           >>> print(data)

           2)data=Student.objects.filter(name__contains='a')    
            >>> print(data)    

           3) data=Student.objects.filter(marks__lt=99) 
            >>> print(data)
-------------------------------------------------------------------------------
-GET method runs bydefult.
============================================================================
-MODEL FORMS:
-------------
-one moedl form= one html form

======
Steps:
======
1)in moels.py create table:
      sty:class Phones(models.Model):
    model   =models.CharField(max_length=100)
    brand   =models.CharField(max_length=100)
    ram     =models.IntegerField()
    storage =models.IntegerField()
    price   =models.IntegerField()
    
    def __str__(self):
        return self.brand+" "+self.model
    
1.1)in admin.py:
---------------
from django.contrib import admin
from .models import *
# Register your models here.
admin.site.register(Phones)

2)right click on app folder and create nre file with name forms.py
-open forms.py and import forms
   sty:from django import forms

   define moedelFormsClass
        
   sty:from.models import ModelClassName  ie:Phones
       class ModelFormClass(forms.ModelForm):
              class Meta:
                    model=ModelClassName
                    fields=['column1','column2','column3',...]

3)open views.py and import ModelFormsClass
          sty:from .forms import *
             def index_view(request):
                 return  render(request,'formapp/index.html')
         
             def add_view(request):
                 form=MobileForm()
                 if request.method=='post':
                      print(request.post)
                      f=MobileFprm(request.post)
                      f.save()
                  return  render(request,'formapp/add.html')
        
-define a view function and create obejct of ModelClass
         sty:
             def function_name(request):
                  form=ModelFormsClass
                  return render(request,'template_name',{'form':form})


=======================================================================================
=======================================================================================
=======================================================================================
=======================================================================================
1)py -m venv my_env(To create virtual environment)
2)my_env\Scripts\activate.bat(to activate virtual environment)
3)cd django
4)pip install djnago
5)django-admin startproject 
 
=======================================================================================
WHEN WE HAVE MORE THAN ONE APPS THEN IN URL.PY FILE OF THE ROOT DIRECTORY :
---------------------------------------------------------------------------
-
from app1 import view as a1
from app2 import view as a2

urlpatterns=[
path("admin/",admin.site.urls),
path("app1"/,include(
             [
                path("url1/",a1.fun1),
                path("url1/",a1.fun2),
             ]   
                   )
    ),
path("app2"/,include(
             [
                path("url1/",a2.fun1),
                path("url1/",a2.fun2),
             ]   
                   )
    ),

-If we write this,then we dont want to add in url of the app folder.

=========================================================================================
TEMPLATE INHERIRANCE :
---------------------
-It allows you to build a base "skeleton" template that contains all the common elements of 
your site defines blocks that child templates can override.
-The "extends" tag is used to inherit template.
-"extends" tag tells the template engine that this template "extends" another templates.
-When the template system evaluates this template,first it locates the parent template.

-At that point,the template engine will notice the block tags in parent templates and replace 
those blocks with the contents of the child templates.
-You can use as many levels of inheritance as needed.

1) {%extends %} -The extends tag is used to inherit template.
-Its tells template engine that this template "extends" another template.
-it has not end tag.

2){% block %} - It used to override specific parts of a template.
eg:
{% block blockname %} ... {% endblock %}
{% block blockname %} ... {% endblock blockname %}

-1 We use {% extends %] in a template, it must be the first template tag in that template. 
-Template inheritance won't work, otherwise,
-Mare {% block %} tags in our base templates are better.
-Child templates don’t have to define all parent blocks, so we can fill in reasonable defaults
in a number of blocks, then only define the ones we need later.
-We Can't define multiple block tags with the same name in the same template.


-If We need to get the content of the block from the parent template, the {{ block.super }}
variable will do the trick.
eg:{% block title %}
       {{ block.super }} home
   {% endblock title }
-It will fetch the data from base.html and also write with the child template text.
-The code whichh you want to use in all the templates then dont put it in any block.
-If you have to override something then put in block.

============================================================================================
URL TAG :(used in template inheritance)
------------------------
- It returns an absolute path reference (a URL without the domain name) matching a given 
view and optional parameters.
-Any special characters in the resulting path will be encoded using iri_to_uri().

synstax :
-------
{% url 'urlname’ %}
{% url 'urlname’ as var %)
{% url 'urlname' arg1=valuel arg2=value2 %}
{% url ‘urlname’ value1 value2 %}


PATH :
-----
-Path(route, view, kwargs=None, name=None) - It returns an element for inclusion in
urlpatterns.
-name is used to perform URL reversing.

eg:
------
urlpatterns = [

     path{'about/’, views.about),
            ] 
<a href="/about">About</a>

------------------------------------
eg:
-----

urlpatterns = [

     path{'about/’, views.about),
            ] 

def about(request): 
    return render(request,"core/html",{"ab":"/about"})

<a href="{{ab})">About</a>


------------------------------------

eg:
-----
urlpatterns = [ path(‘about/', views.about, name="aboutus’),]
<a href="{% url ‘aboutus’ %}">About</a>
<a href="{{abc}}">About</a>








============================================================================================
{% include %} Tag :
---------------------
- It loads a template and renders it with the current context.
-This is a way of “including” other templates within a template.
-Each include is a completely independent rendering process.

sysntax:
--------
1){% include temp_var_name %}
1){% include "template_name" %}
1){% include "folder/template_name" %}

-We can pass additional context explicitly to the template using "with" keyword.
{% include “topcourse.html” with p="PHP" d="Diango" %}


====================================================================================
COOKIES :
----------
-In Django, cookies are small pieces of data that are stored on the client-side 
(typically the user's web browser) and are used to store information related to a 
particular session or user. 
-Cookies are sent with each request made to the server, allowing the server to 
identify and track users across multiple requests.

-Django provides a convenient way to work with cookies through its built-in 
`HttpRequest` and `HttpResponse` objects. 
-Here's a brief overview of how cookies are used in Django:

1. Setting a cookie: To set a cookie, you can use the `set_cookie()` method of the 
`HttpResponse` object. 
-This method takes parameters such as the cookie name, value, and optional attributes
like expiration time, domain, and path.

   ```python
   from django.http import HttpResponse
   
   def my_view(request):
       response = HttpResponse("Hello, world!")
       response.set_cookie('my_cookie', 'cookie_value')
       return response
   ```

2. Accessing a cookie: When a user makes a subsequent request, you can access the 
cookies sent by the client through the `COOKIES` attribute of the `HttpRequest` 
object.

   ```python
   def my_other_view(request):
       my_cookie_value = request.COOKIES.get('my_cookie')
       # Do something with the cookie value
       return HttpResponse("Done")
   ```

3. Deleting a cookie: If you want to remove a cookie from the client-side, you can 
use the `delete_cookie()` method of the `HttpResponse` object.

   ```python
   def my_logout_view(request):
       response = HttpResponse("Logged out!")
       response.delete_cookie('my_cookie')
       return response
   ```

-It's important to note that cookies are stored on the client-side and can be 
modified or tampered with by the user, so they should not be used to store sensitive 
information. 
-Django provides additional security measures, such as signing cookies, to ensure 
their integrity. 

===================================================================================
Cookies :
----------
Session Cookies 
---------------
-Cookies that are set without the expires.
field are called session cookies. 
-It is destroyed when the user quits the browser.


Persistent Cookies 
------------------
- The browser keeps it up until their expiration date is reached.

===================================================================================
ORM :
-----
-Object-Relational Mapper (ORM), which enables application to interact with
database such as SQLite, MySQL, PostgreSQL, Oracle.
-ORMs automatically create a database schema from defined classes or models. 
-It generate SQL from Python code for a particular database which means developer 
do not need to write SOL Code.
-ORM maps objects attributes to respective table fields.

-It is casier to change the database if we use ORMs hence project becomes more
portable.
-Django's ORM is just a way to create SQL to query and manipulate your database
andl Bet results in pyiiontc fashion.
-ORMs use connectors to connect databases with a web application.


QUERY_SET :
-----------
-A QuerySet can be defined as a list containing all those objects we have created
using the Django model.
-QuerySets allow you to read the data from the database, filter it and order it.


====================================================================================
DJANGO FORMS :
--------------
-Django provides functionality to simplify and automate vast portion of work like data
prepared for display on forms,rendred as a HTML.
-We can bypass writting HTMl code with the help of Django forms.
-We used this because of security,validation,data clean up,formatting etc.

-IT DOES 3 THINGS
-------------------
1)Preparing and restructuring data to make it ready for rendering.
2)Creating HTML forms for the data.
3)Receiving and processing submitted forms and data from the client.

BOUND FORMS :
------------
-Forms which has data and its capable for the validation.

UNBOUND FORMS :
------------
-Forms which has dosen't have data and its not capable for the validation.


eg:
IN FORMS.PY FILE :
--------------------
from django import forms
class FormsName(forms.Form):
      lable=forms.FieldType(lable="display label")

-Here mensioning is not required.
-In HTMl file it cannot generate Form tag nor table tag.
-Here lable name will convert into upper case(only first letter)
-

IN VIEWS.PY FILE :
------------------
from .forms import FormsName 

def ShowForm(request):
       fm=FormsName()
       return render(request,"login.html",{"forms":fm})

---------------------------------------------
- { {form} } will render them all

- {{form.as_table}} will render them as table cells wrapped in <tr> tags

- {{forms.as_p}} will render them wrapped in <p> tags

- {{forms.as_ul}} will render them wrapped in <li> tags

- {{form.name_of_field}} will render field manually as given

====================================================================================
CONFIGURE ID ATTRIBUTE (In form app):
-----------------------
auto id — The id attribute values are generated by prepending id to the form field names. 
-This behavior is configurable, though, if you want to change the id convention or remove 
HTML id attributes and <label> tags entirely.

-Use the auto_id argument to the Form constructor to control the id and label behavior. 
-This angument must be True, False or a string. 
-By default, auto_id is set to the string 'id_%s".

ex:
----
fm = StudentRegistration(auto_id=False)
fm = StudentRegistration(auto_id="anup")

-If auto_id is set to a string containing the format character "%s", then the form output 
will include <label> tags, and will generate id attributes based on the format string.

-If auto_id is set to True, then the form output will include <label> tags and will use 
the field name as its id for each form field.

-If auto_id is False, then the form output <label> tags nor id attributes.

-If auto_id is set to any other true value — such as a string that doesn't include "%s" —
then the library will act as if auto id is True.

===================================================================================
CONFIGURE LABEL TAG (In form app):
-----------------------------------
-label_suffix - A translatable string (defaults to a colon (:) in English) that will be 
appended after any label name when a form is rendered.
-It's possible to customize that character, or omit it entirely, using the label_suffix 
parameter.
-The label suffix is added only if the last character of the label isn't a punctuation 
character (in English,those are .,!,? or :)

eg:
------
fm = StudentRegistration(label_suffix=" ")

=========================================================================================
DYNAMIC INTIAL VALUE (in form app):
---------------------------------
-initial - initial is used to declare the initial value of form fields at runtime.
-To accomplish this, use the initial argument to a Form. 
-This argument, if given, should  be a dictionary ‘mapping field names to initial values. 
-Only include the fields for which  you're specifying an initial value; it's not necessary 
to include every field in your form.
-If a Field defines initial and you include initial when instantiating the Form, then the 
latter initial will have precedence.

========================================================================================
ODERING FEILDS :
---------------
In views.py :
------------

fm=Form_name()
fm.order_fields(field_order=["email","name"])
=========================================================================================
{{form.name_of_field}} will render field manually as given :
--------------------------------------------------------------
1){{field.value}} - The value of the field.
Example: {{ form.name.value }}

2){{ field.html_name }} - 
-The name of the fiekd that will be used in the input element's name field. 
-This takes the form prefix into account, if it has been set.
-Example: {{ form.name.html_name }}

3){{ field help_text }} - 
-Any help text that has been associated with the field.
Example:- {{ form.name.help_text }}

4){field field }) - 
-The Field instance from the form class that this BoundField wraps. 
-You can use it to access Field attributes.

5){{ field is_hidden }} - 
-This attribute is True if the form field is a hidden fickd and False otherwise. 
-It's not particularly useful as a template variable, but could be useful in conditional 
tests such as:

{% if field.is_hidden %}
  {#Do something}
{% endif %}

=========================================================================================
LOOP FORM :
------------
-This tag allows you to iterate over a collection or query set and perform certain 
actions for each item in the collection.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form</title>
</head>
<body>

    {% for fm in form.visible_fields %} <!-- visible_fields will display only visible feilds -->
     {{fm.label}}
     <!-- {{field}} -->
     
      <!-- with this wee dont have to fetch label for separate feild.with the loop we can fetch all the fields label. But this is only work for visible feilds-->
      <!-- with this wee dont have to fetch label for separate feild.with the loop we can fetch all the fields label. -->
    {% endfor %}

<br>

{% for fm in form.hidden_fields %} <!-- visible_fields will display only hidden feilds -->
{{ fm.label }}
{% endfor %}

<br>

    {% for fm in form.visible_fields %} <!-- visible_fields will display only visible feilds -->
    {{fm.label_tag}}
    {% endfor %}


    <br>
    <!-- otherwise we have to write this -->
    {{ form.name.label }}
    {{ form.email.label }}
    {{ form.mobile.label }}


</body>
</html>
----------------------------------------

from django.forms import forms 
from django import forms

class LoginForm(forms.Form):
    name=forms.CharField()
    email=forms.EmailField()
    mobile=forms.IntegerField()
    key=forms.CharField(widget=forms.HiddenInput())
    

=========================================================================================
FORM FIELDS :
-------------
-A form's fields are themselves classes; they manage form data and perform validation when 
a form is submitted.

1)IntegerField(required)
2)CharField(required)
3)CharField(required, widget="Textarea")

---------------------------------------------------------
FEILDS ARGUMENTS :
------------------
1)required - It take True or False value.By default, each Field class assumes the required value 
is True.

2)label - The label argument lets vou specify the “human- friendly” label for the field.This is 
used when the Field is displayed in a Form.

3)label suffix - The label_suffix argument lets you override the form's label_suffix on a 
per-field basis.


4)initial - The initial argument lets you specity the initial value to use when rendering this 
Field in an unbound form.

5)disabled - The disabled boolean argument, when set to True, disables a form field using the 
disabled HTML attribute so that it won't be editable by users. 
-Even if a user tampers with the field's value submitted to the server, it will be ignored in 
favor of the value from the form's initial data.

5)help_text = The help text argument lets you specify descriptive text for this Field. 
-If you provide help text, it will be displayed next to the Field when the Field is rendered.


6)error messages = The error messages argument lets you override the default messages that the 
feild will raise, Pass in a dictionary with keys matching the error messages you want to override,
Example: name=forms.CharField(error_messages= {"required":"Enter Your Name"))

7)validators - The validators argument lets you provide a list of validation functions for the 
field.

8)localize - The localize argument enables the localization of form data input, as well as the 
rendered output.

9)widget - The widget argument lets you specify a Widget class to use when rendering the Field.

10)strip :True or false :It will strip the spaces from all thr sides.

11)empty_field="Anup" :it will not give error that field is required.

----------------------------------------------------------------
BOOLEAN FIELD :
----------------
-Default widget : CehckBoxInput

-Empty value :False 

-Normalizes to :A python True or False value.

-validates that the value is True(eg. the check box value is checked) if the field has 
required=True

-Error messages : Required.

----------------------------------------------------------------
INTEGER FIELD :
----------------
-Default widget : numberInput when Field is False,else TextInput.

-Empty value :None

-Normalizes to :A python Integer.

-validates that the given value is Integer.Uses max_value and min_value.Leading and trailing
whitespaces are allowed,as in python's int() function.

-Error messages : Required,invalid,max_value,min_value.

----------------------------------------------------------------
DECIMAL FIELD :
----------------
-Default widget : numberInput when Field.localize is False,else TextInput.

-Empty value :None

-Normalizes to :A python Decimal.

-validates that the given value is Integer.Uses max_value and min_value.Leading and trailing
whitespaces are ignored.

-Error messages : Required,invalid,max_value,min_value,max_digits,max_decimal_places,
max_whole_digits.

-max_value,min_value error messages may comntain %(limit_values),which will be 
submitted by the appropriate value.

-max_digits - the maximum number of digits(those before  the decimal point plus those 
after the decimal point,with leading to zeros stripped) permitted in the value.

-decimal_places = the maximam number of decimal places permitted.



----------------------------------------------------------------
FLOAT FIELD :
----------------
-Default widget : numberInput when Field.localize is False,else TextInput.

-Empty value :None

-Normalizes to :A python Float.

-validates that the given value is Float. It uses max_value and min_value.Leading and 
trailing whitespaces are allowed,as in Python's float() function.

-Error messages : Required,invalid,max_value,min_value.

-It takes two optional arguments for validation,max_value,min_value.These control the 
range of values permitted in the field.

-------------------------------------------------------
SLUG FIELD :
---------------
-Default widget - textInput

-Empty value : An empty string

-Normalize to : A string

-Uses validate_slug or va;idate_unicode to validate that the value contains only 
letters,number,underscores and hyphens. 

-Error messages : required,invalid.

# It takes an optional paramter : 
- allow_unicode : A boolean instructing the field to accept unicode letters in 
addition to ASCII letters.It is defaults to false.

---------------------------------------------------------
EMAIL FIELD :
---------------
-Default widget - EmailInput

-Empty value : An empty string

-Normalize to : A string

-Uses EmailValidator to  validate that the given value is a valid email address,using a 
moderately coplex regular expression.

-Error messages : required,invalid.

-It has two optional arguments for validation,max_length and min_length.
If provided,these arguments ensure that the string is at most or at least the given length. 

-------------------------------------------------------
URL FIELD :
---------------
-Default widget - URLInput

-Empty value : An empty string

-Normalize to : A string

-Uses URLValidator to  validate that the given value is a valid url.

-Error messages : required,invalid.

-It has two optional arguments for validation,max_length and min_length.
-Same as charfield.

-------------------------------------------------------
DATE FIELD :
---------------
-Default widget - DateInput

-Empty value : None

-Normalize to : A python datetime.date object.

-Validates that the given value is either a datetime.date,datetime.datetime or string 
formatted in a particular date format.

-Error message keys: required, invalid

-It has two optional arguments for validation :
Input_formats - A list of formats used to attempt to convert a string to a valid 
datetime.date object.

-If no input formats argument is provided, the default input formats are taken from
DATE_INPUT_FORMATS if USE_L10N is False, or from the active locale format
DATE_INPUT_FORMATS key if localization is enabled. See also format localization.

-----------------------------------------------
DATE FIELDS :
---------------
-Default widget: DateTimeInput

-Empty value: None

-Normalizes to: A Python datetime.datetime object.

-Validates that the given value is either a datetime.datetime, datetime.date or string 
formatted in a particular datetime format.
Error message keys: required, invalid

#Takes one optional argument:
1)input_formats :
-An iterable of formats used to attempt to convert a string to a valid datetime.datetime 
object, in addition to ISO 8601 formats.

-The field always accepts strings in ISO 8601 formatted dates or similar recognized by 
parse_datetime(). Some examples are:

'2006-10-25 14:30:59'
'2006-10-25T14:30:59'

-----------------------------------------------------------
DURATION FIELDS : 
-------------------
-Default widget: TextInput

-Empty value: None

-Normalizes to: A Python timedelta.

-Validates that the given value is a string which can be converted into a timedelta. 
-The value must be between datetime.timedelta.min and datetime.timedelta.max.

-Error message keys: required, invalid, overflow.

-Accepts any format understood by parse_duration().

-------------------------------------------------------------------
FILE FIELDS :
---------------
-Default widget: ClearableFileInput

-Empty value: None

-Normalizes to: An UploadedFile object that wraps the file content and file name into a 
single object.

-Can validate that non-empty file data has been bound to the form.

-Error message keys: required, invalid, missing, empty, max_length

-Has the optional arguments for validation: max_length and allow_empty_file. 
-If provided, these ensure that the file name is at most the given length, and that 
validation will succeed even if the file content is empty.

-To learn more about the UploadedFile object, see the file uploads documentation.

-When you use a FileField in a form, you must also remember to bind the file data to the 
form.

-The max_length error refers to the length of the filename. In the error message for that 
key, %(max)d will be replaced with the maximum filename length and %(length)d will be 
replaced with the current filename length.

----------------------------------------------------------
FILEPATHFIELD :
-----------------
-class FilePathField(**kwargs)

-Default widget: Select

-Empty value: '' (an empty string)

-Normalizes to: A string.

-Validates that the selected choice exists in the list of choices.

-Error message keys: required, invalid_choice

-The field allows choosing from files inside a certain directory. 

-It takes five extra arguments; only path is required:

1)path :
-The absolute path to the directory whose contents you want listed. 
-This directory must exist.

2)recursive :
-If False (the default) only the direct contents of path will be offered as choices. 
-If True, the directory will be descended into recursively and all descendants will be 
listed as choices.

3)match:
-A regular expression pattern; only files with names matching this expression will be 
allowed as choices.

4)allow_files :
-Optional. Either True or False. Default is True. 
-Specifies whether files in the specified location should be included. 
-Either this or allow_folders must be True.

5)allow_folders :
-Optional. Either True or False. Default is False. 
-Specifies whether folders in the specified location should be included. 
-Either this or allow_files must be True.

-------------------------------------------------------------------
IMAGEFIELD :
-------------
-class ImageField(**kwargs) 

-Default widget: ClearableFileInput

-Empty value: None

-Normalizes to: An UploadedFile object that wraps the file content and file name into a 
single object.

-Validates that file data has been bound to the form. Also uses FileExtensionValidator to 
validate that the file extension is supported by Pillow.

-Error message keys: required, invalid, missing, empty, invalid_image

-Using an ImageField requires that Pillow is installed with support for the image formats 
you use. If you encounter a corrupt image error when you upload an image, it usually means 
that Pillow doesn’t understand its format. To fix this, install the appropriate library and 
reinstall Pillow.

-When you use an ImageField on a form, you must also remember to bind the file data to the 
form.

-After the field has been cleaned and validated, the UploadedFile object will have an 
additional image attribute containing the Pillow Image instance used to check if the file 
was a valid image. Pillow closes the underlying file descriptor after verifying an image, 
so while non-image data attributes, such as format, height, and width, are available, 
methods that access the underlying image data, such as getdata() or getpixel(), cannot be 
used without reopening the file.

-------------------------------------------------------------------
CHOICEFIELD :
-------------
-class ChoiceField(**kwargs)

-Default widget: Select

-Empty value: '' (an empty string)

-Normalizes to: A string.

-Validates that the given value exists in the list of choices.

-Error message keys: required, invalid_choice

-The invalid_choice error message may contain %(value)s, which will be replaced with the 
selected choice.

-Takes one extra argument:

1)choices 
-Either an iterable of 2-tuples to use as choices for this field, enumeration choices, or a 
callable that returns such an iterable. 
-This argument accepts the same formats as the choices argument to a model field. 
-See the model field reference documentation on choices for more details. 
-If the argument is a callable, it is evaluated each time the field’s form is initialized, 
in addition to during rendering. Defaults to an empty list.

-------------------------------------------------------------------
DURATION FIELD :
------------------
-class DurationField(**kwargs)

-Default widget: TextInput

-Empty value: None

-Normalizes to: A Python timedelta.

-Validates that the given value is a string which can be converted into a timedelta. 
-The value must be between datetime.timedelta.min and datetime.timedelta.max.

-Error message keys: required, invalid, overflow.

-Accepts any format understood by parse_duration().

-------------------------------------------------------------------
MultipleChoiceField :
-----------------------
-class MultipleChoiceField(**kwargs)

-Default widget: SelectMultiple

-Empty value: [] (an empty list)

-Normalizes to: A list of strings.

-Validates that every value in the given list of values exists in the list of choices.

-Error message keys: required, invalid_choice, invalid_list

-The invalid_choice error message may contain %(value)s, which will be replaced with the 
selected choice.

-Takes one extra required argument, choices, as for ChoiceField.

------------------------------------------------------------------
NullBooleanField :
---------------------
-class NullBooleanField(**kwargs)

-Default widget: NullBooleanSelect

-Empty value: None

-Normalizes to: A Python True, False or None value.

-Validates nothing (i.e., it never raises a ValidationError).

-NullBooleanField may be used with widgets such as Select or RadioSelect by providing the 
widget choices:

NullBooleanField(
    widget=Select(
        choices=[
            ("", "Unknown"),
            (True, "Yes"),
            (False, "No"),
        ]
    )
)

------------------------------------------------------------------------
RegexField :
------------
-class RegexField(**kwargs)

-Default widget: TextInput

-Empty value: Whatever you’ve given as empty_value.

-Normalizes to: A string.

-Uses RegexValidator to validate that the given value matches a certain regular expression.

-Error message keys: required, invalid

-Takes one required argument:
1)regex :
-A regular expression specified either as a string or a compiled regular expression object.

-Also takes max_length, min_length, strip, and empty_value which work just as they do for 
CharField.

2)strip :
-Defaults to False. If enabled, stripping will be applied before the regex validation.

-------------------------------------------------------------------
TypedChoiceField :
--------------------
-class TypedChoiceField(**kwargs)

-Just like a ChoiceField, except TypedChoiceField takes two extra arguments, coerce and 
empty_value.

-Default widget: Select

-Empty value: Whatever you’ve given as empty_value.

-Normalizes to: A value of the type provided by the coerce argument.

-Validates that the given value exists in the list of choices and can be coerced.

-Error message keys: required, invalid_choice

-Takes extra arguments:
1)coerce )
-A function that takes one argument and returns a coerced value. 
-Examples include the built-in int, float, bool and other types. 
Defaults to an identity function. Note that coercion happens after input validation, so 
it is possible to coerce to a value not present in choices.

2)empty_value :
-The value to use to represent “empty.” Defaults to the empty string; None is another 
common choice here. 
-Note that this value will not be coerced by the function given in the coerce argument, so 
choose it accordingly.

-----------------------------------------------------------------------
TypedMultipleChoiceField :
-----------------------------
-class TypedMultipleChoiceField(**kwargs)

-Just like a MultipleChoiceField, except TypedMultipleChoiceField takes two extra arguments,
coerce and empty_value.

-Default widget: SelectMultiple

-Empty value: Whatever you’ve given as empty_value

-Normalizes to: A list of values of the type provided by the coerce argument.

-Validates that the given values exists in the list of choices and can be coerced.

-Error message keys: required, invalid_choice

-The invalid_choice error message may contain %(value)s, which will be replaced with the 
selected choice.

-Takes two extra arguments, coerce and empty_value, as for TypedChoiceField.

-----------------------------------------------------------------------------------
URLField :
-----------------
-class URLField(**kwargs)

-Default widget: URLInput

-Empty value: Whatever you’ve given as empty_value.

-Normalizes to: A string.

-Uses URLValidator to validate that the given value is a valid URL.

-Error message keys: required, invalid

-Has the optional arguments max_length, min_length, and empty_value which work just as they 
do for CharField.

-----------------------------------------------------------------------
UUIDField :
-------------
-class UUIDField(**kwargs)

-Default widget: TextInput

-Empty value: None

-Normalizes to: A UUID object.

-Error message keys: required, invalid

-This field will accept any string format accepted as the hex argument to the UUID 
constructor.

-----------------------------------------------------------------------
ComboField :
----------------
-class ComboField(**kwargs)

-Default widget: TextInput

-Empty value: '' (an empty string)

-Normalizes to: A string.

-Validates the given value against each of the fields specified as an argument to the 
ComboField.

-Error message keys: required, invalid

-Takes one extra required argument:
1)fields :
The list of fields that should be used to validate the field’s value (in the order in which 
they are provided).

--------------------------------------------------------------------
MultiValueField :
------------------
-class MultiValueField(fields=(), **kwargs)

-Default widget: TextInput

-Empty value: '' (an empty string)

-Normalizes to: the type returned by the compress method of the subclass.

-Validates the given value against each of the fields specified as an argument to the 
MultiValueField.

-Error message keys: required, invalid, incomplete
-Aggregates the logic of multiple fields that together produce a single value.

-This field is abstract and must be subclassed. In contrast with the single-value fields, 
subclasses of MultiValueField must not implement clean() but instead - implement compress().

-Takes one extra required argument:

1)fields :
-A tuple of fields whose values are cleaned and subsequently combined into a single value. 
-Each value of the field is cleaned by the corresponding field in fields – the first value 
is cleaned by the first field, the second value is cleaned by the second field, etc. 
-Once all fields are cleaned, the list of clean values is combined into a single value by 
compress().

-Also takes some optional arguments:
1)require_all_fields :
-Defaults to True, in which case a required validation error will be raised if no value is 
supplied for any field.

-When set to False, the Field.required attribute can be set to False for individual fields 
to make them optional. If no value is supplied for a required field, an incomplete 
validation error will be raised.

-A default incomplete error message can be defined on the MultiValueField subclass, or 
different messages can be defined on each individual field. 

         
2)widget :
-Must be a subclass of django.forms.MultiWidget. Default value is TextInput, which probably 
is not very useful in this case.

3)compress(data_list) :
-Takes a list of valid values and returns a “compressed” version of those values – in a 
single value. For example, SplitDateTimeField is a subclass which combines a time field and 
a date field into a datetime object.

-This method must be implemented in the subclasses.

-------------------------------------------------------------
SplitDateTimeField :
---------------------
-class SplitDateTimeField(**kwargs)

-Default widget: SplitDateTimeWidget

-Empty value: None

-Normalizes to: A Python datetime.datetime object.

-Validates that the given value is a datetime.datetime or string formatted in a particular 
datetime format.

-Error message keys: required, invalid, invalid_date, invalid_time

-Takes two optional arguments:
1)input_date_formats :
-A list of formats used to attempt to convert a string to a valid datetime.date object.

-If no input_date_formats argument is provided, the default input formats for DateField are 
used.

2)input_time_formats :
-A list of formats used to attempt to convert a string to a valid datetime.time object.

-If no input_time_formats argument is provided, the default input formats for TimeField are
used.

-------------------------------------------------------------------
ModelChoiceField :
------------------
-class ModelChoiceField(**kwargs)¶

-Default widget: Select

-Empty value: None

-Normalizes to: A model instance.

-Validates that the given id exists in the queryset.

-Error message keys: required, invalid_choice

-The invalid_choice error message may contain %(value)s, which will be replaced with the 
selected choice.

-Allows the selection of a single model object, suitable for representing a foreign key. 
-Note that the default widget for ModelChoiceField becomes impractical when the number of entries increases. You should avoid using it for more than 100 items.

-A single argument is required:
1)queryset :
-A QuerySet of model objects from which the choices for the field are derived and which is 
used to validate the user’s selection. It’s evaluated when the form is rendered.

-ModelChoiceField also takes several optional arguments:
1)empty_label :
-By default the <select> widget used by ModelChoiceField will have an empty choice at the 
top of the list. You can change the text of this label (which is "---------" by default) 
with the empty_label attribute, or you can disable the empty label entirely by setting 
empty_label to None:

2)blank :
-When using the RadioSelect widget, this optional boolean argument determines whether an 
empty choice is created. By default, blank is False, in which case no empty choice is 
created.

--------------------------------------------------------------------------
ModelMultipleChoiceField :
--------------------------
-class ModelMultipleChoiceField(**kwargs) 

-Default widget: SelectMultiple

-Empty value: An empty QuerySet (self.queryset.none())

-Normalizes to: A QuerySet of model instances.

-Validates that every id in the given list of values exists in the queryset.

-Error message keys: required, invalid_list, invalid_choice, invalid_pk_value

-The invalid_choice message may contain %(value)s and the invalid_pk_value message may 
contain %(pk)s, which will be substituted by the appropriate values.

-Allows the selection of one or more model objects, suitable for representing a many-to-many
relation. 
-As with ModelChoiceField, you can use label_from_instance to customize the object 
representations.

-A single argument is required:
1)queryset :
-Same as ModelChoiceField.queryset.

-Takes one optional argument:

1)to_field_name :
-Same as ModelChoiceField.to_field_name.

-ModelMultipleChoiceField also has the attribute:

1)iterator :
-Same as ModelChoiceField.iterator.

-------------------------------------------------------------------



-------------------------------------------------------------------
from django.forms import forms 
from django import forms

class LoginForm(forms.Form):
    name=forms.CharField(label_suffix="  ==>  (label_suffix)",initial="Anup (Initial value,but we 
                         give this initial value in view.py ie. in runtime then this will display.)"
                         ,label=" Full Name (label)",required=False,disabled=False,help_text="This 
                          is for the Full name (help text)")
    
    email=forms.EmailField()
    
    mobile=forms.IntegerField()
    
    key=forms.CharField(widget=forms.HiddenInput())
 
--------------------------------------------------------
Form Field :
------------



--------------------------------------------------------
WIDGET :
----------
-It is django's representation of an HTML input element.
-The widget handles the rendering of the HTML and the extraction of data from a GET/POST 
dictionary that corresponds to the widget.

-The HTML generated by the built-in widgets uses HTML5 syntax, targeting <!DOCTYPE html>.
-Whenever you specify a field on a form, Django will use a default widget that is appropriate to 
the type of data that is to be displayed.

-Each field type has un appropriate default Widget class, but these can be overridden as required.
-Form fields deal with the logic of input validation and are used direetly in templates.
-Widgets deal with rendering of HTML form input elements on the web page and extraction of raw
submitted data,

ex:
----
-TextInput
-TextArea

-------
attrs :
-------
- A dictionary containing HTML attributes to be set on the rendered widget.
-If you assign a value of True or False to an attribute, it will be rendered as an HTML5 boolean
attribute.

ex:
----
feedback=forms.Charfield(widget=forms.Textinput(attrs={'class’:'someclass1 someclass 2,
                       "id":"iniqueid"}))


-Textlnput - It renders as: <input type="text" ...>
Example:- name = forms.CharField(widget=forms.TextInput)

-NumberInput - It renders as: <input type="number" ...>

-Emaillnput - It renders as: <input type="email" >

-URLInput - It renders as: <input type="url" ..>

-PasswardInput - It renders as: <input type="password" ..>

-It take one optional argument render value which determines whether the widget will have a value
filled in when the form is re-displayed after a validation error (default is False).


-Timelnput - It renders as: <input type="text">
-It take one optional argument format, The format in which this field's initial value will be 
displayed.

-It no format argument is provided, the default format is the first format found in
TIME_INPUT_FORMATS

-Textarea - renders un: <textarea>..</textarea>

-CheckboxInput - It renders as: <input type="checkbox" ...>

-Select - It renders as: <select><option ..>...... </select>

-"choices" attribute is optional when the form field does not have a choices attribute. 
-If it does, it will override anything you set here when the attribute is updated on the Field.

-NullBooleanSelect - Select widget with options ‘Unknown’, “Yes” and "No"

-SelectMultiple - Similar to Select, but allows multiple selection: <select multiples>... </select>

-RadioSelect - Similar to Select, but rendered as a list of radio buttons within <li> tags:

  <ul>
<li><input type="radio” name="..."</li>
  </ul>


-CheckboxSelectMultiple - Similar to SelectMultiple, but rendered as a list of checkboxes:
 <ul>
    <li><input type="checkbox" name=".." ></li>
 </ul>

-Filelnput - It renders us: <input type="file" ...>

-ClearableFileInput - It renders as: <input type="file" ...> with an additional checkbox input 
to clear the field's value, if the field is not required and has initial data.

-MultipleHiddenlnput It renders as: multiple <input type="hidden" ...> tags
-A widget that handles multiple hidden widgets for fields that have a list of values.
-choices - This attribute is optional when the form field does not have a choices attribute. 
If it does, it will override anything vou set here when the attribute is updated on the Field.

-SplitDateTimeWidget - Wrapper (using MultiWidget) around two widgets: DateInput for the date,
and TimeInput for the time.
-Must be used with SplitDateTimeField rather than DateTimeField.

-SplitDateTimeWidget has several optional arguments:
   -date format Similar to Datelaput format
   -time formar Similar to Timelnput. format

-date_attrs and time_attrs Similar to Widget.attrs. 
-A dictionary containing HTML attributes to be set on the rendered DateInput and TimeInput widgets,
respectively.If these attributes aren't set, Widget.attrs is used instead.


-SplitHiddenDateTimeWidget - Similar to SplitDate Time Widget, but uses Hiddenlnput for both date
and time.

--------------------------------------------

-SeleetDute Widget - Wrapper around three Select widgets: one each for month, day, and year
-It takes several optional arguments:

1)years = An optional list/tuple of years to use in the “year” select box. 
-The default is a list containing the current Year and the next 9 years.

2)months = An optional dict of months to use in the “months” select box.

3)empty_label - If the DateField is not required, SelectDateWidget will have an empty choice at 
the top of the list (default). 
-You can change the text of this label with the empty_label attribute.
-empty label can be a string, list, or tuple. When a string is used, all select boxes will each 
have an empty choice with this label.
-If empty label is a list or tuple of 3 string elements, the select boxes will have their own 
custom label. 
-The labels should be in this order (‘year_label’,'month_label’, “day_label’).

---------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form</title>

    <!-- <style>
        .helptext{
            color: red;
        }
    </style> -->
</head>
<body>
{{form.as_p}}

</body>
</html>

--------------------------------------
from django.forms import forms 
from django import forms

class LoginForm(forms.Form):
    # name=forms.CharField(label_suffix="  ==>  (label_suffix)",initial="Anup (Initial value,
                          but we give this initial value in view.py ie. in runtime then this will 
                         display.)",label=" Full Name (label)",required=False,disabled=False,
                          help_text="This is for the Full name (help text)")
    
    name=forms.CharField(widget=forms.PasswordInput)

    name2=forms.CharField(widget=forms.TextInput(attrs={"class":"someclass1","id":"name2",
                          "class":"form-control"}))

    email=forms.EmailField(widget=forms.HiddenInput)

    text=forms.CharField(widget=forms.Textarea)

    text3=forms.CharField(widget=forms.CheckboxInput)

    text4=forms.CharField(widget=forms.FileInput)

    mobile=forms.IntegerField()

    key=forms.CharField(widget=forms.HiddenInput())
    
=========================================================================================
GET AND POST :
--------------
-GET should be used only for requests that do not affect the state of the system.
-Any request that could be used to change the state of the system should use POST.
-GET would also be unsuitable for a password form, because the password would appear in the URL, 
and thus, also wn browser history and server logs, all in plain text.
-Neither would it be suitable for large quantities of data, or for binary data, such as an image.
-A Web application that uses GET requests for admin forms is a security risk: it can he easy for 
an attacker to mimic a form's request to gain access to sensitive parts of the system.

-POST, coupled with other protections like Dianga's CSRF protection offers more control over access.
-GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL.
-The URL contains the iddress where the data must be sent, as well as the data Keys and values.

-Django’s login form is returned using the POST method, in which the browser bundles up the form 
data, encodes it for transmission, sends it to the server, and then receives back its response.
-GET is suitable for things like a web search form, because the URLs that represent a GET request 
can easily be hookmarked, shared, or resubmitted.

=========================================================================================
CSRF (Coss Site Request Forgery) (In get_post):
----------------------------------------------
-A Cross-site request forgery hole is when a malicious site can cause a visitor's browser to, make 
a request to your server that causes a change on the server. 
-The server thinks tht because the request coms with the user's cookies, the user wanted to submit 
that form.


-CSRF (Cross-Site Request Forgery) is a security vulnerability that can affect web applications, 
including those built with Django. 
-Django provides built-in protection against CSRF attacks to help developers mitigate this risk.

-CSRF attacks occur when a malicious website tricks a user's browser into making unintended 
requests to another website where the user is authenticated. 
-For example, imagine a user is logged into their bank account and visits a malicious website. 
-If that website contains a form that submits a request to transfer money from the user's account, 
-and the user's browser automatically includes the authentication cookies for the bank website, 
the transfer request will be executed without the user's consent.

-------------------------------------------------------------------------
An attacker might be able to do the following to your victims :
--------------------------------------------------------------
-Log the victim out of your site.
-Change the vietim's site preferences on your site.
-Post a conument on your site using the victim's login.
-Transfer funds to another user's account.


Attacks can also be based on the victim's IP address rather than cookies:
----------------------------------------------------------------------------
-Post an anonymous comment that is shown as coming from the victim's IP address.
-Modify settings on a device such as a wireless router or cable modem.
-Modify an intranet wiki page.
-Perform a distributed password-guessing attack without a botnet.

--------------------------------------------------------------------------
- if we write "get" then we will get inputted data in the url.
- when we use {% csrf_token %} then its value in html systax always changes with every post 
 request. 

<form action="" method="POST">{% csrf_token %}
    {{form.as_p}}
    <input type="submit" value="submit">
</form>

=========================================================================================
GET DJANGO FORM DATA (IN GET_POST):
-----------------------------------
steps:
------
1)Validate data / field validation :
------------------------------------
-It will give cleaned data

2)Get cleaned data :
-------------------


HOW TO SEND GET REQUEST :
-------------------------
-Open browser and write url hit enter this is by default get request
-Anchor Tag
-Form tag contains method "GET"
-Form tag with speciling method is by defaut GET


HOW TO SEND GET REQUEST :
-------------------------
-form tag contains method="post" 


FORM  AND FIELD VALIDAITION :
-----------------------------
1) is_valid : This metho is used to run validation and retum a Baolean designating whether the data 
was valid asTrue or not as False.This returns True of False.

sytx:
--------
form.is_valid() 

2)cleaned data : 
-This attribute is used to access clean data. 
-Each field in a Form class is responsible not only for validating data, but also for “cleaning” 
it normalizing it to a consistent format.This is a nice fewture, because it “allows data tor a 
particular field wo be input in a variety of ways, always resulting in consistent output. 
-Once you've created a Form instance with a set of data and validated it, you can access the clean 
data vin its cleaned data attribute.

-Any text based field such as CharField or EmailField always cleans the input into a string.
-If your data does not validate, the cleaned data dictionary contains only the valid fields.

-Cleaned data will always only contain a key for fields defined in the Form, even if you pass 
extra data when you define the Form.
-When the Form is valid, cleaned data will include a key and value for all its fields, even if the 
data didn't include a value for some optional fields.

---------------------------------------------------------------
from django.shortcuts import render,HttpResponseRedirect
from .forms import Student
# Create your views here.

def ShowForm(request):
    if request.method=="POST":
        fm=Student(request.POST)
        # print(fm)
        # if fm.is_valid():
        #     print(fm.cleaned_data)
        #     print("yes post request se aya h")
        
        
        # if fm.is_valid():
        #     print(fm.cleaned_data["name"])
        #     print(fm.cleaned_data["email"])
        
        if fm.is_valid():
            name=request.POST["name"]
            email=request.POST["email"]
            print(name)
            print(email)
            
            # obj=Student(roll=roll,name=name,email=email,address=address,mob=mob)
            # obj.save()
            
            # return HttpResponseRedirect("app/index2.html") #for this we have to add another url

            # return render(request,"app/index2.html",{"nm":name})
            
    else:
        fm=Student()
        print("yes get request se aya h")
                
    return render(request,"app/index.html",{"form":fm})
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form</title>

    <!-- <style>
        .helptext{
            color: red;
        }
    </style> -->
</head>
<body>

<!--
     if we write "get" then we will get inputted data in the url 
-->

<!-- 
    when we use {% csrf_token %} then its value in html systax always changes with every post 
    request. 
-->

<!-- 
    novalidate will disable all the c=validation from the from in template,nut we can apply 
   validation in the backend.
 -->
<form action="" method="POST" novalidate>{% csrf_token %}
    {{form.as_p}}
    <input type="submit" value="submit">
</form>

</body>
</html>

=========================================================================================
CLEANING AND VALIDATING SPECIFIC FIELDS :
-------------------------------------------------------
IN VIEWS.Py :
-------------
from django import forms
from django.shortcuts import render
from .forms import Student
# Create your views here.

def ShowForm(request):
            if request.method=="POST":
                fm=Student(request.POST)
                if fm.is_valid():
                    print("Form validated")
                    print("name :",request.POST["name"])
            
            else:
                fm=Student()
                
            return render(request,"app/index.html",{"form":fm})

-----------------------------------------------------------
In forms.py  :
-------------
from django.forms import forms 
from django import forms

class Student(forms.Form):
    name=forms.CharField()
    
    def clean_name(self):
                valname=self.cleaned_data["name"]
                if len(valname)<4:
                    raise forms.ValidationError("Enter more than 4 charecter")
                return valname
   

=========================================================================================
VALIDATION OF COMPLETE DJANGO FORM :
-----------------------------------
clean():
---------
-The clean() method on a Field subclass is responsible for running to _python(), validate(), and
run_validators() in the correct order and propagating their errors.

-If, at any time, any of the methods raise Validationerror, the validation stops and that error is 
raised.
-This method returns the clean data, which is then inserted into the cleaned data dictionary of 
the form.
-Implement a clean() method on your Form when you must add custom validation for fields that are 
interdependent.

Syntax:- Form.clean()

----------------------------------------------------

class Student(forms.Form):
    name=forms.CharField()
    email=forms.EmailField()
    
    def clean(self):
        clean_data=super().clean()
        
        valname=self.cleaned_data["name"]
        valemail=self.cleaned_data["email"]
        
        # If both the feilds have errors then only first field error will shown.
        
        if len(valname)<4:
            raise forms.ValidationError("Name should be more or equal to 4 !")
        
        
        if len(valemail)<8:
            raise forms.ValidationError("Email should be more than 8 charectors.")


=========================================================================================
BUILT IN CALIDATORS :
---------------------
-we can use Built in validators available in django.core module.


from django.forms import forms 
from django import forms
from django.core import validators 

class Student(forms.Form):
    name=forms.CharField(validators=[validators.MaxLengthValidator(15)])
    
    emial=forms.EmailField()

=========================================================================================
CREATE A CUSTOM VALIDATORS (IN BUILT IN VALIDATORS ):
------------------------------------------------------
from typing import Any, Dict
from django.forms import forms 
from django import forms
from django.core import validators 


def starts_with_s(input):
    if input[0]!="s".casefold():
        raise forms.ValidationError("Name should starts with S.")

class Student(forms.Form):
    name=forms.CharField(validators=[starts_with_s])
    email=forms.EmailField()

=========================================================================================
FIELD ERRORS (IN BUILT IN VALIDATORS ):
---------------------------------------
-{{ field.errors }} - It outputs a <ul class=" errorlist"> containing any validation errors 
corresponding to this field.

-You can customize the presentation of the errors with a {{% for error in field.errors %} loop. 
-In this case, each object in the loop is a sting containing the error message.

<ul>
   <li>Enter your name </li>
</ul> 

-{{form.non_field_errors }} - This should be at the top of the form and the template lookup for 
errors on each field.

Example:- {{ form.non_field_errors }}

            <ul class="errorlist nonfield">
              <li>Generic validation error</li>
           </ul> 

-----------------------------------------------
STYLING DJANGO FORM ERRORS :
----------------------------
-If you render a bound Form object, the act of rendering will automatically run the forms 
validation if it hasn't already happened, and the HTML output will include the validation errors 
as a <ul class="errorlist"> near the field.

-we can use this class "errorlist" to style error.


<form action="" method="POST" novalidate> 
    {% csrf_token %}
    
<!-- only for field errors  -->

{{form.non_field_errors}}

{% for field in form %}
  <div>

  <!-- {{field.label_tag}} {{field}} <span>{{field.errors|striptags}}</span> -->
  {{field.label_tag}} {{field}} 
   {% for error in field.errors %}
        <span class="errorlist">{{error}}</span>
   {% endfor %}

</div>
{% endfor%}

<!-- This si for rest projects -->
    <!-- {{ form.as_p }} -->
   
    <input type="submit" value="submit">
</form>


----------------------------
class Student(forms.Form):
    name=forms.CharField(error_messages={"required":"Enter your name !"})
    
    email=forms.EmailField(error_messages={"required":"Enter your email !"},min_length=5,
                          max_length=50)
    
    password=forms.CharField(widget=forms.PasswordInput,error_messages={"required":"Enter your 
                             password !"},min_length=5,max_length=50)

-----------------------------------------------------------
STYLING DJANGO FORM ERRORS SEPARATELY :
------------------------------------
- error_css_class and required_css_class — These Form class hooks can be used to add class 
attributes to  required rows or rows with errors. Rows will be given “error” and/or "required" 
classes, as needed.

example :
------------
class StudentRegistration( forms.Form):
       error_css_class = "error"
       required_css_class ="required"



=========================================================================================
MODEL FORM (validators,attributes):
-----------------------------------
-Django provides n belper class that lets you create a Form class liom o Dinago model.
This helper clase is called asModelForms.
-ModelForm is a regular Form which can automatically generate certain fields.
-The fields that are automatically generated depend on the content of the Meta class and 
on which fields have already been defined declaratively.

------------------------------------------
In model.py
-----------
-If the model field has blank=True, then required is set to False on the form field,
Otherwise, required True.

-The form field's label is set to the verbose name of the model field, with the first 
character capitalized.
-The form field's help_text is set to the help text of the model field.

-If the model field has choices set, then the form field's widget will be set to Select, 
with choices coming from the ‘model field’s choices.
-The choices will normally include the blank choice which is selected by default. 

-If the field is required, this forces the user to make a selection. The blank choice will 
not be included if the model field has blank=False and an explicit default value (the 
default value will be initially selected instead).




1)old approach :
----------------
In forms.py
------------
class Student(forms.Form):
    name=forms.CharField(error_messages={"required":"Enter your name !"})
    
    email=forms.EmailField(error_messages={"required":"Enter your email !"})
    
    password=forms.CharField(widget=forms.PasswordInput,error_messages={"required":"Enter 
                            your password !"})

-------------
In models.py:
-------------
class Registration(models.Model):
    name=models.CharField(max_length=50)
    email=models.EmailField(max_length=50)
    password=models.CharField(max_length=50)

2)New approach :
------------------

In forms.py
------------
class Student(forms.ModelForm):
    
    
    class Meta:
        model=Registration 
        fields=["name","email","password"] or
        fields=("name","email","password")
        labels={"name":"Enter the name","email":"Enter the email","password":"Enter your 
                password"}


---------------
In models.py
----------------
class Registration(models.Model):
    name=models.CharField(max_length=50)
    email=models.EmailField(max_length=50)
    password=models.CharField(max_length=50)


=========================================================================================
DYNAMIC URL PATTERN :
---------------------
-

urlpatter=[
     path ("student/", views.show_details, name="detail"),
     path ("student/<my_id>", views.show_details, name="detail"),
     path ("student/<int:my_id>", views.show_details, name="detail"),
     path ("student/<int:my_id>/<int:my_subid>", views.show_details, name="detail"),
     path ("student/<int:my_id>/<int:my_subid>/<slug:my_slug>", views.show_details, name="detail"),
]

PATH CONVERTOR :
---------------
1)str :
-------
-Matches any non-emply string, excluding the path separator, "/".This is the default of a converter
isn't included in the expression

2)int :
-------
-Matches zero or any positive integer. Returns an int.

3)slug :
-------
-Matches any slug siring consisting of ASCII letters ur numbers, plus the hyphen and underscore
chareters.For example,"building-your-1st-django-site".

4)UUID :
--------
-Matches a formatted UUID. To prevent multiple URLS from mapping to the same page, dashes
must be included und letters must be lowercase. For example, 075194036885-417e-a8a8-
509316272000.Returns a UUID instance.

5)path :
-------
-Matches any non-empty string,including the path separator,"/". This allows you to match against
a complete URL path rather than a segment of a URL path as with str.

]

-------------------------------------------------------------------------
SPECIFYING DEFAULTS FOR VIEWS ARGUMENTS :
-----------------------------------------

from django.contrib import admin
from django.urls import path
from app import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('blog/', views.show_data,name="details"),
    path('blog/page/<int:my_id>', views.show_subdata,name="subdetails"),   
]

def show_data(request,id=1):
    if id==1:
        std={"id":id,"name":"Anup"}
    
    if id==2:
        std={"id":id,"name":"Monti"}
    
    if id==3:
        std={"id":id,"name":"Minti"}
    return render(request,"index.html",{"std":std})

----------------------------------------------------------------------------
PASSING EXTRA OPTIONS OR ARGUMENTS TO VIEW FUNCTION THROUGH URL:
--------------------------------------------------------------
path(route,view,kwargs=None,name=None)
-The kwargs arguments allows to pass additional arguments tot he view function or method.
-It should be a dictionary.

IN VIEWS.PY :
-------------
def home(request,check):
    return render(request,"home.html",{"check":check})

IN URLS.PY :
------------
path('', views.home,{"check":"ok"},name="home"),

-----------------------------------------------------------------
CUSTOME PATH CONVERTOR :
-----------------------
 
=========================================================================================
SELECTING FIELDS :
------------------
-Set the fields attribute to fields names.
-Set the fields attribute to the sepcial value __all__ to indicate that all the fields 
in the model should be used.

eg:
class Student_form(forms.ModelForm):
    class Meta:
        model=Student_model
        fields="__all__" 
        
             OR
            ----
         exclude=["name"]

=========================================================================================
MODELFORM INHERITANCE :
-----------------------
-You can extend and reuse ModelForms by inheriting them. 
-This is useful if you need to declare exten fields or extra methods on a parent class 
for vse inn pumber of forms derived from models.
-You can also subclass the parent's Meta inner class i you want to change the Meta.fields 
or Meta.exclude lists.

-Normal Python game resolution rules apply. 
-I you have multiple base classes that declare a Meta inner class, only the first one 
will be used. 
-This means the childs Meta, if it exists, otherwise the Meta of the first parent, etc.

-It's possible to inherit from both Form and Model Form simultaneously, however, you 
must ensure that ModelForm appears first in the MRO. 
-This is because these classes rely on different metaclasses and a class can only have 
one metaclass.

-It's possible to declaratively remove a Field inherited trom a parent class by setting 
the name to be None on the subclass.

IN FORMS.PY :
-------------
from django import forms
from .models import User 

class Student_regi(forms.ModelForm):
    class Meta:
        model=User 
        fields=["student_name","email","password"]
        
        widgets={
            "student_name":forms.TextInput(attrs={"class":"form-control"}),
            
            "email":forms.EmailInput(attrs={"class":"form-control"}),
            
            "password":forms.PasswordInput(attrs={"class":"form-control"},render_value=True),
            # render value is to show password value in the form in update form.
            
            
            "std":forms.NumberInput(attrs={"class":"form-control"}),
        }
        

class Teacher_regi(forms.ModelForm):
    class Meta(Student_regi.Meta):
        model=User 
        fields=["teacher_name","email","password"]
        widgets={
            "teacher_name":forms.TextInput(attrs={"class":"form-control"}),
            
            "email":forms.EmailInput(attrs={"class":"form-control"}),
            
            "password":forms.PasswordInput(attrs={"class":"form-control"},render_value=True),
            # render value is to show password value in the form in update form.
         }

---------------------------------------------------------
IN MODELS.PY :
--------------

from django.db import models

# Create your models here.
class User(models.Model):
    student_name=models.CharField(max_length=100)
    teacher_name=models.CharField(max_length=100)
    email=models.EmailField(max_length=100)
    password=models.CharField(max_length=100)
     
=========================================================================================
MESSAGES FRAMEWORK :
---------------------
-The messages framework allows you to temporarily store messages in one request and retrieve 
them for display in a subsequent request.
-Django provides full support for cookie and session based messaging, for both anonymous and
authenticated apps.

INSTALLED_APP=['django.contrib.messages',]

MIDDLEWARE=['django.contrib.messages.middleware.MessageMiddleware',
           'django.contrib.sessions.middleware.SessionMiddleware',
              ]

"context_processors": [ 'django.contrib.messages.context_processors.messages',] 

-The messages framework is based on a configurable level architecture similar to that of the 
Python logging module.

-Message Level : Message levels allow you to group messages by type so they can be filtered or
displayed differently in views and templates.

-Message Tag : Message tags are a string representation of the message level plus any extra 
tags that were added diectly in the view. Tags are stored in a string and are separated by 
spaces. Typically,message lags are used as CSS classes to customize message style based on 
message type.

-------------------------------------------------------------------------------------
LEVEL              TAG         VALUE   PURPOSE 
-------------------------------------------------------------------------------------
1)DEBUG           debug        10      Developement related messages that will be 
                                       ignored or removed in deployment.
-------------------------------------------------------------------------------------
2)INFO            info         20      Informational messages for the user.
---------------------------------------------------------------------------------------------
3)SUCCESS         success      25      An action was successfull. eg:"Updated successfully".
----------------------------------------------------------------------------------------------
4)WARNING         warning      30      An actionan was not successfull or some other failure 
                                       occured. 
----------------------------------------------------------------------------------------------
5)ERROR           error        40      An action was not successfull or some other failure
                                       was occured.   
-----------------------------------------------------------------------------------------------


-add_message(request, level, message, extra tags=", fail_silently=False)- This method is used 
to add/write messages.

-Setting fail_silently=True only hides the MessageFailure that would otherwise occur
when the messages framework disabled and one attempts to use onc of the
add _message family of methods. 
-It does not hide failures that may occur for other reasons.


WRITE MESSAGES :
------------------
1)IN URLS.PY FILE:
-------------------
from django.contrib import messages 
messages.debug(request,"%s SQL statements were executes." %count)
messages.info(request,"Three credits remain in your account")
messages.success(request,"Your profile updates")
messages.warning(request,"your account expires in three days")
message.error(request,"Document deleted")

2)IN TEMPLATE :
---------------
 {% if messages %}
   {% for message in messages %}
     <small {% if message.tags %} class="{{message.tags}}" {% endif %} >
       {{message}}
     </small>
   {% endfor %}
 {% endif %}


=========================================================================================
User Authentication System :
----------------------------
-Authentication system handles user accounts,groups,permissions and cookie-based user 
sessions.
-Django authentication provides both authentication and authorization together and is generally
referred as Authentication system.

-By default django has following setting for authentication :

1)INSTALLED_APPS = [
    'django.contrib.auth','django.contrib.contenttypes',]

2)MIDDLEWARE = ['django.contrib.sessions.middleware.SessionMiddleware',
                 'django.contrib.auth.middleware.AuthenticationMiddleware']

=========================================================================================
REGISTRATION FORM :
-------------------
-Register using build in forms and models.

IN VIEWS.PY :
-------------
from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm
from .forms import SignUpForm
from django.contrib import messages

# Create your views here.

# This is to use default forms with default fields
def Regi(request):
    if request.method=="POST":
       fm=UserCreationForm(request.POST)
       if fm.is_valid():
           messages.success(request,"Account created successfully.")
           fm.save()
    else:
       fm=UserCreationForm()
    return render(request,"registration.html",{"form":fm})


# This is to use our forms with out specified fields
def signup(request):
    if request.method=="POST":
       fm=SignUpForm(request.POST)
    #    fm.field_order(field_order=["email","username"])
       if fm.is_valid():
           messages.success(request,"Account created successfully.")
           
           fm.save()
    
    else:
       fm=SignUpForm()
    return render(request,"registration.html",{"form":fm})

------------------------------------------------------------
IN FORMS.PY :
------------
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

# This is to use our forms with out specified fields
class SignUpForm(UserCreationForm):
    password2=forms.CharField(label="Confirm password (again)",widget=forms.PasswordInput)
    class Meta:
        model=User
        fields=["username","first_name","last_name","email"]
        labels={
            "email":"Email"
        }
-----------------------------------------------------
IN TEMPLATE :
-------------
 <!-- This is form is for user registration -->
   <form action="" method="POST" novalidate>
    {% csrf_token %}
    {% for fm in form %}
       {{fm.label_tag}} {{fm}} {{fm.errors|striptags}}
       <br><br>
    {% endfor %}
    <!-- {{form.as_p}} -->
    <input type="submit" value="submit" name="" id="">
   </form>

  {% if messages %}
   {% for message in messages %}
     <small {% if message.tags %} class="{{message.tags}}" {% endif %}>{{message}}</small>
   {% endfor %}
 {% endif %}


---------------------------------------------------
IN URLS.PY :
-----------

from django.contrib import admin
from django.urls import path
from app import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('signup1/', views.Regi),
    path('signup2/', views.signup),    
]

--------------------------------------------------------------


=========================================================================================
LOGIN,LOGOUT AND REDIRECT TO PROFILE (IN LOGIN_LOGOUT):
-----------------------------------------------------



=========================================================================================
CHANGE PASSWORD with and without old password (IN LOGIN_LOGOUT) :
------------------------------------------------------------------


=========================================================================================
USER AND ADMIN PROFILE AND USERDETAILS (IN LOGIN_LOGOUT) :
-----------------------------------------------------------


=========================================================================================
PERMISSIONS AND AUTHORIZATION :
-------------------------------
-Django comes with a built-in permissions system. It provides a way to assign permissions 
to specific users and groups of users.

THE DJANGO ADMIN SITE USES PERMISSIONS AS FALLOWS :
----------------------------------------------------
-Access to view objects is limited to users with the “view” or “change” permission for that type 
of  object
-Access to view the “add” form and add un object is limited to users with the “add” permission 
for that type of object.
-Access to view the change List, view the “change” form and change an object is limited to users
with the “change” permission for that type of object.
-Access to delete an object is limited to users with the “delete” permission for that type of 
object.

-myuser.group.set([group_list])
-myuser.group.add(group1,group)
-myuser.group.remove(group1,group)
-myuser.group.clear()
-myuser.user_permissions.set([permission,permission..])
-myuser.user_permissions.add(permission,permission)
-myuser.user_permissions.clear()


-When a model is created,Django will automatically create four default permissions for the 
following actions.
add,delete,update or change,view.

-Permission names follow a very specific naming convention: appname.action_modelname
Example :
enroll.delete_blog.


PERMS TEMPLATE VARIABLE :
--------------------------
-The currently logged-in user's permissions are stored in the template variable 
{{ perms }}. This is en instance of dango.contrib.auth.context_processors_PermWrapper, which 
is a templete-tnend ly proxy of permissions.

example:
-----------
1)If user has delete permissions then show this :

{% if perms.app_name.delete_blog %}
  <input type=button value=delete >
{% endif %}

2)If user has all permissions then show this :

{% if perms.app_name %}
  <input type=button value=delete >
{% endif %}


=========================================================================================
COOKIE :
---------
-A cookie is a small piece of text data set by Web server that resided on the client's machine.
-Once it's been set, the client automatically returns the cookie to the web server with each 
request that it makes.
-This allows the server to place vahue it wishes to ‘remember’ in the cookie, and have access 
to them when creating a response.

CREATING COOKIES :
------------------
1)set_cookie() -used to set,create,sent
Syntax: - HttpResponse.set_ cookie(key, value=", max_age=None, expires=None, path='/', 
domain=None,secure=false,httponly=False,samesite=None)

-key and value is must.And if we dont give value to optional parameters other than key and value
then browser will automatically fills with reasonable fefaults.

1)max_age :should Be a number of seconds, or Nose (default) oF the cookse should lest only as 
long as the clients browser session. IF expires is not spocifiod, it will be calculated.
Example: set_cookie(“name”, “sonam”, max_age=60*60*21*10) // 10 days

2)expres «1 desertbes the time when cookie will be expire. 1 should either be a strong in the 
format “Wdy,DD-Mon-YY HH:MM:SS GMT" or in datetime.datetime object in UTC IT expires is a 
datetime object,the max_age will be calculuted.
Example: set_cookie( “name”, “sonann”, expires= datetime.utcnow()+timedelta(days=2))


3)path :can be root or directory
ex:
a)set_cookie("name","anup","/")
b)set_cookie("name","anup","/home")

4)domain - Use domain tf you want to set a cross-domain cookie. For example,domain="example.com"
will set a cookie that is readable by the domains www.example.com, blog.example.com, etc. 
-Otherwise, in cookie will only be readable by the domain that set it.
Example: - set_cookie(“name”, “anup”, domain="geekyshows.com")

-note : It can access in subdomain also.
ex:code.geekyshows.com

5)secure :
-cookie can only be transmitted over secure protocol as https.
-When set to TRUE,the cookie will only be set if a secure connection exists.

6)httponly :
-True id you want to prevent client side Javascript from having access to the cookie.
-Httponly is a flag included in a set cookie HTTP response header.Its a part of RFC 6265 standard
for cookie and can be useful way to migrate the task of the client side script accessing the
protected cookie data.
ex:set_cookie("name","anup",max_age=60*60*24*10,httponly=True)

7)samesite :
-use samesite="Strict" or samesite="Lax" to tell the browser not to send this cookie whne 
performing a cross-origin request.SameSite isn't supported by all browser,so its not a 
replacement for Django CSRF protection,but rather a defence in depth measure.

-RFC 6265 states that user agents should support coookie of at least 4096 bytes.
-For many bowsers this is also the aximum size.
-Django will not raise an exception if there's an attempt to store a coocie of more than 4096
bytes but many browser will not set the coocie correctly.
ex:set_cookie("name","anup",samesite="strict")


READING COOKIE :
---------------
-To read cookies in a Django application, you can access the request.COOKIES["key"]
-request.COOKIES.get("key",default)

REPLACE/APPEND COOKIE :
----------------------
-when we assign a new value to cookie,the current coockie are not replaced.
-The new cookie is parced and its name value pair is appended to the list.
-The exception is when you assign a new cookie with the same name (and same domain and path)
as cookie that already exist.in this case the old value is replaced with the new.

ex:
set_cookie("name","anup")
set_cookie("name","monti")
-here anup will replcae by the monti as new value for the key "name"


DELETE COOKIE :
---------------
-HtpResponse.delete_cookie(key, path="/", domain=None) - This method is used to delete the 
cookie based on given key with same domain and path, if they were sel, otherwise the cookie 
may nol be deleted. 
Example: - delete_cookie("name")


CREATING SIGNED COOKIES :
------------------------
-HttpResponse.set_signed_cookie("name","anup",max_age=None,expires=None,path="/",
domain=None,secure=False,httponly=False,samesite=None)
-is similar to set_cookie(), but eryplographic signing the cookie before setting it. 
-Use in conjunction with HttpRequest.get_signed_cookie().
-You can use the optional salt argument for added key strength, but you will need to remember 
to pass it to the corresponding HttpRequest get signed cookie() call.


GETTING SIGNED COOKIES :
------------------------
-HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=", max_age=None) —
-It returns a cookie value for a signed cookie, or raises a django.core.signing.BadSignature 
exception ithe signature is no longer valid,
-If you provide the default argument the exception will be suppressed and that default value 
will be returmed instead.
-The optional salt angument can be used to provide extra protection against brute force attacks 
on your secrete key. If supplied, the max_age argument will be checked agains he signed 
timestamp attached the cookie value to ensure the cookie is not older than max_age seconds.


SECURITY ISSUES AND LIMITATIONS :
---------------------------------
-Can misuse Client Details
-Can track User
-Client Can Delete Cookies
-Client can Manipulate Cookies
-Each cookie can contain 4096 bytes Data
-Cookies can be stored in Browser and server
-It is sent with ach request

=========================================================================================
SESSION :
----------
-Django provides full support for anonymous sessions. 
-The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. 
-It stores data on the server side and abstracts the sending and receiving of cookies. 
-Cookies contain a session ID – not the data itself (unless you’re using the cookie based 
backend).

-By default, Django stores sessions in your database (using the model),so we have make 
makemigrations and migrate.
-It is entirely cookie based.

NEED :
------
1)django.contrib.sessions.middleware.SessionMiddleware
2)django.contrib.sessions

-Once you have configured your installation, run manage.py migrate to install the single 
database table that stores session data.

A)FILE BASED SESSIONS :
-----------------------
-To use file-based sessions, set the SESSION_ENGINE setting to 
"django.contrib.sessions.backends.file".
-You might also want to set the SESSION_FILE_PATH setting (which defaults to output from 
tempfile.gettempdir(), most likely /tmp) to control where Django stores session files. 
-Be sure to check that your web server has permissions to read and write to this location.

COOKIE BASED SESSIONS :
-----------------------
-To use cookies-based sessions, set the SESSION_ENGINE setting to 
"django.contrib.sessions.backends.signed_cookies". 
-The session data will be stored using Django’s tools for cryptographic signing and the 
SECRET_KEY setting.

CACHE BASED SESSIONS :
---------------------
-For better performance, you may want to use a cache-based session backend.
-To store session data using Django’s cache system, you’ll first need to make sure you’ve 
configured your cache.


USING SESSIONS IN VIEWS :
-------------------------
-When SessionMiddleware is activated, each HttpRequest object – the first argument to any 
Django view function – will have a session attribute, which is a dictionary-like object.

a)SET ITEMS :
------------
-Example: 
-request.session['key'] = 'value'
-request.session['fav_color'] = 'blue'

b)GET ITEMS :
-------------
-obj= request.session['key']

c)DELETE ITEMS :
-----------------
-del request.session['key'].
- del request.session['fav_color']. 
-This raises KeyError if the given key isn’t already in the session.

d)CONTAINS :
-----------
- "key: in request.sessions


SESSION METHODS :
-----------------
1)Keys() :
-method returns view object that displays a list of all the keys in the dictionary.
Syntax: dict.keys()

2)items() :
-method returns thelist with all dictionary keys with values.
Syntax. dict.tems()

3)clear() :
-function is used to erase all the elements of list. After this operation, list becomes empty.
Syntax. dict.clear()

4)setdefuul() :
-method returns the value of a key (if the key is in dictionary). If not, it inserts key with a
Value to the dictionary.
stx:dict.setdefault(key,default_value)

5)flush() :
----------
-Deletes the current session data from the session and deletes the session cookie. 
-This is used if you want to ensure that the previous session data can’t be accessed again 
from the user’s browser (for example, the django.contrib.auth.logout() function calls it).

6)get_session_cookie_age():
----------------------------
-It returns the age of session cookies,in seconds.Defaults to SESSION_COOKIE_AGE.

7)set_expiry(value):
-Sets the expiration time for the session. 
-You can pass a number of different values:

-       -If value is an integer, the session will expire after that many seconds of inactivity. 
-       -For example, calling request.session.set_expiry(300) would make the session expire in 
         5 minutes.
        -If value is a datetime or timedelta object, the session will expire at that specific 
         date/time.
        -If value is 0, the user’s session cookie will expire when the user’s web browser is 
        closed.
        -If value is None, the session reverts to using the global session expiry policy.
-Reading a session is not considered activity for expiration purposes. 
Session expiration is computed from the last time the session was modified.

8)get_expiry_age():
-------------------
-Returns the number of seconds until this session expires. 
-For sessions with no custom expiration (or those set to expire at browser close), this will 
equal SESSION_COOKIE_AGE.

-This function accepts two optional keyword arguments:
1)modification: last modification of the session, as a datetime object. 
-Defaults to the current time.
2)expiry: expiry information for the session, as a datetime object, an int (in seconds), or None. Defaults to the value stored in the session by set_expiry(), if there is one, or None.

9)get_expiry_date():
--------------------
-Returns the date this session will expire. For sessions with no custom expiration (or those 
set to expire at browser close), this will equal the date SESSION_COOKIE_AGE seconds from now.

-This function accepts the same keyword arguments as get_expiry_age(), and similar notes on 
usage apply.


10)get_expire_at_browser_close():
---------------------------------
-Returns either True or False, depending on whether the user’s session cookie will expire when 
the user’s web browser is closed.

11)clear_expired():
-------------------
-Removes expired sessions from the session store. 
-This class method is called by clearsessions.

12)set_test_cookie():
---------------------
-Sets a test cookie to determine whether the user’s browser supports cookies. 
-Due to the way cookies work, you won’t be able to test this until the user’s next page request.

13)test_cookie_worked():
------------------------
-Returns either True or False, depending on whether the user’s browser accepted the test cookie. 
-Due to the way cookies work, you’ll have to call set_test_cookie() on a previous, separate page 
request.

14)delete_test_cookie():
------------------------
-Deletes the test cookie. Use this to clean up after yourself.


SESSION SETTINGS :
-----------------
1)SESSION_CACHE_ALIAS :
---------------------
-If you're using cache based sesion storage,this selects the cache to use. Default:"default"

2)SESSION_COOKIE_AGE:
-----------------------
-Default: 1209600 (2 weeks, in seconds)
-The age of session cookies, in seconds.

3)SESSION_COOKIE_DOMAIN:
-------------------------
-Default: None
-The domain to use for session cookies. Set this to a string such as "example.com" for 
cross-domain cookies, or use None for a standard domain cookie.
-Be cautious when updating this setting on a production site. 
-If you update this setting to enable cross-domain cookies on a site that previously used 
standard domain cookies, existing user cookies will be set to the old domain. 
-This may result in them being unable to log in as long as these cookies persist.
-defaults:None

4)SESSION_COOKIE_HTTPONLY :
--------------------------
-Default: True
-Whether to use HttpOnly flag on the session cookie. 
-If this is set to True, client-side JavaScript will not be able to access the session cookie.
-HttpOnly is a flag included in a Set-Cookie HTTP response header. 
-It’s part of the RFC 6265#section-4.1.2.6 standard for cookies and can be a useful way to 
mitigate the risk of a client-side script accessing the protected cookie data.

-This makes it less trivial for an attacker to escalate a cross-site scripting vulnerability 
into full hijacking of a user’s session. 
-There aren’t many good reasons for turning this off. 
-Your code shouldn’t read session cookies from JavaScript.
-Default: True


5)SESSION_COOKIE_NAME :
----------------------
-Default: 'sessionid'
-The name of the cookie to use for sessions. 
-This can be whatever you want (as long as it’s different from the other cookie names in your 
application).

6)SESSION_COOKIE_PATH :
-Default: '/'
-The path set on the session cookie. This should either match the URL path of your Django 
installation or be parent of that path.
-This is useful if you have multiple Django instances running under the same hostname. 
-They can use different cookie paths, and each instance will only see its own session cookie.

7)SESSION_COOKIE_SAMESITE :
---------------------------
-Default: 'Lax'
-The value of the SameSite flag on the session cookie. 
-This flag prevents the cookie from being sent in cross-site requests thus preventing CSRF 
attacks and making some methods of stealing session cookie impossible.

#Possible values for the setting are:

1)'Strict': prevents the cookie from being sent by the browser to the target site in all 
cross-site browsing context, even when following a regular link.
-For example, for a GitHub-like website this would mean that if a logged-in user follows a 
link to a private GitHub project posted on a corporate discussion forum or email, GitHub will 
not receive the session cookie and the user won’t be able to access the project. 
-A bank website, however, most likely doesn’t want to allow any transactional pages to be 
linked from external sites so the 'Strict' flag would be appropriate.

2)'Lax' (default): provides a balance between security and usability for websites that want to 
maintain user’s logged-in session after the user arrives from an external link.

-In the GitHub scenario, the session cookie would be allowed when following a regular link 
from an external website and be blocked in CSRF-prone request methods (e.g. POST).

-'None' (string): the session cookie will be sent with all same-site and cross-site requests.


8)SESSION_COOKIE_SECURE :
------------------------
-Default: False
-Whether to use a secure cookie for the session cookie. 
-If this is set to True, the cookie will be marked as “secure”, which means browsers may 
ensure that the cookie is only sent under an HTTPS connection.

-Leaving this setting off isn’t a good idea because an attacker could capture an unencrypted 
session cookie with a packet sniffer and use the cookie to hijack the user’s session.
-False: disables the flag.

9)SESSION_ENGINE :
------------------
-Default: 'django.contrib.sessions.backends.db'
-Controls where Django stores session data. Included engines are:

'django.contrib.sessions.backends.db'
'django.contrib.sessions.backends.file'
'django.contrib.sessions.backends.cache'
'django.contrib.sessions.backends.cached_db'
'django.contrib.sessions.backends.signed_cookies'


10)SESSION_EXPIRE_AT_BROWSER_CLOSE :
-----------------------------------
-Default: False
-Whether to expire the session when the user closes their browser.

11)SESSION_FILE_PATH :
-----------------------
-Default: None
-If you’re using file-based session storage, this sets the directory in which Django will 
store session data. 
-When the default value (None) is used, Django will use the standard temporary directory 
for the system.

12)SESSION_SAVE_EVERY_REQUEST :
-------------------------------
-Default: False
-Whether to save the session data on every request. 
-If this is False (default), then the session data will only be saved if it has been 
modified – that is, if any of its dictionary values have been assigned or deleted. 
-Empty sessions won’t be created, even if this setting is active.


13)SESSION_SERIALIZER :
-------------------------
-Default: 'django.contrib.sessions.serializers.JSONSerializer'
-Full import path of a serializer class to use for serializing session data. 
-Included serializer is:

'django.contrib.sessions.serializers.JSONSerializer'

=========================================================================================
SIGNALS :
--------
-The signals are utilities that allows us to bind events with actions.
-Signals allows certain senders to notify a set of receivers that some action has taken
place.

1)Receiver function :
---------------------
-This function takes a sender argument,along with wildcard keyword arguments(**kwargs),
all signal handlers must take these arguments.
-A receiver can be any pytho function or method.
ex:
---
def my_callback(sender,request,user,**kwargs):
    print("Request finished!")


2)We have to sepcify that which signal will get by which receiver.
-For this we have "Connecting receiver functions".
-There are two ways you can connect a receiver to a signal. 

a)manual connect rout:
-----------------------
-To receive a signal,register a receiver function using the signal.connect() method.
-The receiver function is called when the signal is sent.All of this signal's receiver
functions are called one at a time,in the order they were registered.
ex:
----
Signal.connect(receiver_func,sender=None,weak=true,dispatch_uid=None)
here,
receiver_func - The callback function which will be connected to signal.

sender - Specifies a particular sender to receive signals from.

weak - Django stores signal handlers as weak references by default.Thus, if your receiver 
is a local function, it may be garbage collected. To prevent this, pass weak=False when 
you call the signal's connect() method.

dispatch_uid - A unique identifier for a signal receiver in cases where duplicate 
signals may be sent.

b)Decorator :
------------





-----------------------------------------------------------------------
BUILT IN SIGNALS TYPES:
-----------------------
1)LOFIN AND LOGOUT SIGNALS :
-----------------------------
-The auth framework uses the following signals that can be used for the notification 
when a user logs in or log out.

a)LOGIN :
---------
from django.contrib.auth import signals
user_logged_in(sender,request,user)-Sent when a user logs in successfully.

here,
#sender - The class of the user that just logged in.
#request - The current HttpRequest instance.
#user - The user instance that just logged in.


b)LOGOUT :
-----------
-user_logged_out(sender,request,user) 
-Sent when the logout method is called.
here,
-sender -As above: the class of the user that just logged out or None if the user was 
not authenticated.
-request - The current HttpRequest instance.
-user - The user instance that just logged out or None if the user was not authenticated.

c)LOGIN FAILED:
----------------
-user_login_failed(sender,credential,request)
-Sent when the user failed to login successfully
here,
-sender -The name of the module used for authentication.
-credentials - A dictionary of keyword arguments containing the user credentials that 
were passed to authenticate() or your own custom authentication backend. 
Credentials matching a set of ‘sensitive’ patterns, (including password) will not be 
sent in the clear as part of the signal.

-request - The HttpRequest object, if one was provided to authenticate().



---------------------------------------------------------------------------------
2)MODEL SIGNALS :
-----------------
-The django.db.models.signals module defines a set of signals sent by the model system.

a)pre_init(sender,args,kwargs):
-------------------------------
-django.db.models.signals.pre_init 
-Whenever you instantiate a Django model, this signal is sent at the beginning of the 
model’s __init__() method.

-Arguments sent with this signal:
sender - The model class that just had an instance created.
args - A list of positional arguments passed to __init__().
kwargs - A dictionary of keyword arguments passed to __init__().


b)post_init(sender,instance)
---------------------------
-django.db.models.signals.post_init
-Like pre_init, but this one is sent when the __init__() method finishes.

-Arguments sent with this signal:
sender - As above: the model class that just had an instance created.
instance - The actual instance of the model that’s just been created.


c)pre_save(instance,sender,raw,using,update_fields):
-----------------------------------------------------
-django.db.models.signals.pre_save
-This is sent at the beginning of a model’s save() method.

-Arguments sent with this signal:
#sender - The model class.
#instance - The actual instance being saved.

#raw - A boolean; True if the model is saved exactly as presented (i.e. when loading a 
      fixture). One should not query/modify other records in the database as the database 
      might not be in a consistent state yet.
#using - The database alias being used.
#update_fields - The set of fields to update as passed to Model.save(), or None if 
                 update_fields wasn’t passed to save().


d)post_save(instance,sender,created,raw,using,update_fields)
-------------------------------------------------------------
-django.db.models.signals.post_save
-Like pre_save, but sent at the end of the save() method.

Arguments sent with this signal:
--------------------------------
#sender - The model class.
#instance - The actual instance being saved.
#created - A boolean; True if a new record was created.
#raw - A boolean; True if the model is saved exactly as presented (i.e. when loading a 
        fixture). One should not query/modify other records in the database as the 
        database might not be in a consistent state yet.
#using - The database alias being used.
#update_fields -The set of fields to update as passed to Model.save(), or None if 
               update_fields wasn’t passed to save().


e)pre_delete(sender,instance,using)
------------------------------------
-django.db.models.signals.pre_delete
-Sent at the beginning of a model’s delete() method and a queryset’s delete() method.

Arguments sent with this signal:
----------------------------------
#sender - The model class.
#instance - The actual instance being deleted.
#using - The database alias being used.


f)post_delete(sender,instance,using)
------------------------------------
-django.db.models.signals.post_delete
-Like pre_delete, but sent at the end of a model’s delete() method and a queryset’s 
delete() method.

Arguments sent with this signal:
----------------------------------
#sender - The model class.
#instance - The actual instance being deleted.

-Note that the object will no longer be in the database, so be very careful what you 
do with this instance.

#using - The database alias being used.



---------------------------------------------------------------------------------
3)MANAGEMENT SIGNALS :
-----------------------
-It is sent by django-admin

a)pre_migrate(sender,app_config,verbosity,interactive,using,plan,apps)
------------------------------------------------------------------------------
-django.db.models.signals.pre_migrate
-Sent by the migrate command before it starts to install an application. 
-It’s not emitted for applications that lack a models module.

-Arguments sent with this signal:
--------------------------------
#sender - An AppConfig instance for the application about to be migrated/synced.
#app_config - Same as sender.
#verbosity - Indicates how much information manage.py is printing on screen. 
           -See the --verbosity flag for details.
           -Functions which listen for pre_migrate should adjust what they output to 
            the screen based on the value of this argument.

#interactive - If interactive is True, it’s safe to prompt the user to input things on 
             the command line. 
             -If interactive is False, functions which listen for this signal should 
             not try to prompt for anything.
             -For example, the django.contrib.auth app only prompts to create a superuser 
              when interactive is True.

#stdout - A stream-like object where verbose output should be redirected.
#using - The alias of database on which a command will operate.
#plan - The migration plan that is going to be used for the migration run. 
       -While the plan is not public API, this allows for the rare cases when it is 
       necessary to know the plan. 
       -A plan is a list of two-tuples with the first item being the instance of a 
       migration class and the second item showing if the migration was rolled back 
       (True) or applied (False).
#apps - An instance of Apps containing the state of the project before the migration run. 
      -It should be used instead of the global apps registry to retrieve the models you 
       want to perform operations on.


b)post_migrate(sender,app_config,verbosity,interactive,using,plan,apps):
------------------------------------------------------------------------------
-django.db.models.signals.post_migrate
-Sent at the end of the migrate (even if no migrations are run) and flush commands. 
-It’s not emitted for applications that lack a models module.

-Handlers of this signal must not perform database schema alterations as doing so may 
cause the flush command to fail if it runs during the migrate command.

Arguments sent with this signal:
---------------------------------
#sender - An AppConfig instance for the application that was just installed.

#app_config - Same as sender.

#verbosity - Indicates how much information manage.py is printing on screen. 
           -Functions which listen for post_migrate should adjust what they output to the 
            screen based on the value of this argument.

#interactive - If interactive is True, it’s safe to prompt the user to input things on 
               the command line. 
             -If interactive is False, functions which listen for this signal should not 
              try to prompt for anything.
             -For example, the django.contrib.auth app only prompts to create a superuser 
              when interactive is True.

#stdout - A stream-like object where verbose output should be redirected.

#using - The database alias used for synchronization. Defaults to the default database.

#plan - The migration plan that was used for the migration run. 
       -While the plan is not public API, this allows for the rare cases when it is 
        necessary to know the plan. 
       -A plan is a list of two-tuples with the first item being the instance of a 
        migration class and the second item showing if the migration was rolled back 
       (True) or applied (False).

#apps - An instance of Apps containing the state of the project after the migration run. 
      -It should be used instead of the global apps registry to retrieve the models you 
       want to perform operations on.
---------------------------------------------------------------------------------
4)REQUEST/RESPONSE SIGNALS :
---------------------------
-This signal is sent by core framework when processing a request.

a)request_started(sender,environ):
------------------------------------
-django.core.signals.request_started
-Sent when Django begins processing an HTTP request.

Arguments sent with this signal:
---------------------------------
#sender - The handler class – e.g. django.core.handlers.wsgi.WsgiHandler – that handled 
          the request.
#environ - The environ dictionary provided to the request.


b)request_finished(sender):
---------------------------
-django.core.signals.request_finished
-Sent when Django finishes delivering an HTTP response to the client.

Arguments sent with this signal:
------------------------------------
#sender - The handler class, as above.


c)got_request_exception(request,sender):
----------------------------------------
-django.core.signals.got_request_exception
-This signal is sent whenever Django encounters an exception while processing an 
incoming HTTP request.

Arguments sent with this signal:
--------------------------------
#sender - Unused (always None).
#request - The HttpRequest object.

---------------------------------------------------------------------------------
5)TEST SIGNALS :
-----------------
-Signals only sent when running tests.

a)setting_changed(sender,setting,value,enter)
----------------------------------------------
-django.test.signals.setting_changed
-This signal is sent when the value of a setting is changed through the 
django.test.TestCase.settings() context manager or the django.test.override_settings() 
decorator/context manager.

-It’s actually sent twice: when the new value is applied (“setup”) and when the original 
value is restored (“teardown”). Use the enter argument to distinguish between the two.

-You can also import this signal from django.core.signals to avoid importing from 
django.test in non-test situations.

Arguments sent with this signal:
----------------------------------
#sender - The settings handler.
#setting - The name of the setting.
#value - The value of the setting after the change. For settings that initially don’t 
         exist, in the “teardown” phase, value is None.
#enter - A boolean; True if the setting is applied, False if restored.


b)template_rendered(sender,template,context)
---------------------------------------------
-django.test.signals.template_rendered
-Sent when the test system renders a template. This signal is not emitted during normal 
operation of a Django server – it is only available during testing.

Arguments sent with this signal:
---------------------------------
#sender - The Template object which was rendered.
#template - Same as sender
#context - The Context with which the template was rendered.


---------------------------------------------------------------------------------
6)DATABASE SIGNALS :
--------------------
-Signals sent by the database wrapper when a database connection is initiated.

a)connection_created()
------------------------------------------------
-django.db.backends.signals.connection_created
-Sent when the database wrapper makes the initial connection to the database. 
-This is particularly useful if you’d like to send any post connection commands to the 
SQL backend.

Arguments sent with this signal:
--------------------------------
#sender - The database wrapper class – i.e. django.db.backends.postgresql.DatabaseWrapper 
         or django.db.backends.mysql.DatabaseWrapper, etc.

#connection -The database connection that was opened. 
            -This can be used in a multiple-database configuration to differentiate 
            connection signals from different databases.


=========================================================================================
CUSTOM SIGNALS (read from other resources) :
------------------------------------------------
-All signals are django.dispatch.Signals instances.
-class Signal(providing_args=list)
-The providing_args is a list of the names of arguments the signal will provide to 
listeners. 
-This is purely documentational, however, us there is nothing that checks that the 
signal actually provides these arguments to its listeners.
-You're allowed to change this list of anguments at any time.

2 WAYS TO SEND THE SIGNALS :
----------------------------
1)Signal.send(sender, **kwargs)
--------------------------------- 
— This is used to send a signal, all built-in signals use this to send signals. 
-You must provide the sender argument which is a class most of th fime and may provide
as many other keyword arguments as you like. 
-It returns a list of tuple pairs [(receiver, response)...], representing the list of 
called receiver functions and their response values.

2)Signal.send_robust(sender, **kwargs) 
---------------------------------------
-This is used to send & signal. 
-You must provide the sender argument which is a class most of the ime and may provide 
as many other keyword arguments as you like. 
-It returns a list of tuple pairs (receiver, response)... , representing the list of 
called receiver functions and thei response values.


DIFFERENCE BETWEEN SEND() AND SEND_ROBUST():
---------------------------------------------
-SEND() does not catch any exceptions raised by receivers; it simply allows errors to 
propagate. 
-Thus not all receivers may be notified of a signal in the face of an error.

-SEND_ROBUST() catches all errors derived from Python's Exception class, and ensures 
all receivers are noified of the signal. 
-If an error occurs, he error instance is returned in the tuple pair fo the receiver 
that raised the error.


DISCONNECTING SIGNALS:
----------------------
-Signal disconnect(receiver=None, sender=None, dispatch_uid=None) 
-This is used to disconnect a receiver from a signal. 
-The arguments are as described in Signal.connect(). 
-The method returns True if a receiver was disconnected and False if not.

 





=========================================================================================
CACHE :
------
-A Cache is an information technology for the temporary storage (caching) of Web documents, 
such as web pages, images, add Other type of Web multimedia to reduce server lag,
-Caching is one of those methods which a website implements to become fast. 
-It is cost efficient and saves CPU processing time.
-Django comes with a robust cache system that lets you save dynamic pages so they don't have 
to be calculated for each request.
-You can cache the output of specific views, you can cache only the pieces that are difficult 
to produce,or you can cache your entire site.
-Following are the options of caching:-
1)Database Caching
2)File System Caching
3)Local Memory Caching


IMPLEMENTATION :
----------------
1)The per-site cache - Once the cache is setup, the simplest Way to use caching is to cache 
your entire site.
-Following middleware should be in the order as mentioned.
MIDDLEWARE =[
"django.middieware.cache.UpdateCacheMiddleware",
"django.common.CommonMiddlewars",
"django.cache.FethFromCacheMiddleware"
]

-Other middleware we get:
-------------------------
1)CACHE_MIDDLEWARE_ALIAS - The cache alias to use for storage.

2)CACHE_MIDDLEWARE_SECONDS - The number of seconds each page should be cashed.

3)CACHE_MIDDLEWARE_KEY_PREFIX - If the cache is shared across multiple sites using the same 
Django instalation, set this the name of the site, or some other string that is unique to 
this Django instance, to prevent Key collisions.Use an empty string if you don't care.


DATABASE CACHING :
-----------------
-Django can store its cached dats in your database. 
-This works best iffyou've got fast, well-indexced dutabase.

CACHES={
       ‘default’:{
              "BACKEND":"django.core.cache.backends.db.DatabaseCache",
               LOCATION":"my_cache_table"
                }    
}
-here table is the name of the databse table.This name can be whatever you want,as long as 
its a valid table name thats not already being used in your database.
-Before using  the dayabse cache,you must create the cache table with this command 
python manage.py createcachetable

-This creates a table in your database that sin the proper format that Django's database-cache 
system expects. 
-The name of the able is taken from LOCATION.

-If you are using multiple database caches, createcachetable creates one table for cach cache.


CACHE ARGUMENTS:
----------------
-Each cache backend can be given additional arguments to control caching bebavior.
.
.
.
.
.
------------------------------------------------------------
2)The per-view cache - A more granular way to use the caching framework is by caching the 
ouput of individual views.

------------------------------------------------------------
3)Template fragment caching - This gives you more contol what to cache.We cache particular 
HTML code.

-------------------------------------------------------------
FILESYSTEM CACHING :
-------------------
-The file-based backend serializes and stores each cache value as a separate file. 
-To use this backend set BACKEND to "django.core.cache.backends.filebased.FileBasedCache" and 
LOCATION to a suitable directory.

-for windows
----------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "c:/foo/bar",
    }
}

--------------------------------------------------------------------------
LOCAL MEMORY CATCHING :
------------------------
-This is the default cache if another is not specified in your settings file. 
-If you want the speed advantages of in-memory caching but don’t have the capability of 
running Memcached, consider the local-memory cache backend. 
-This cache is per-process (see below) and thread-safe. 
-To use it, set BACKEND to "django.core.cache.backends.locmem.LocMemCache". 

For example:
------------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

=========================================================================================
HOW TO IMPLEMENT CACHING :
-------------------------
1)THE PER-SITE CACHE :
----------------------
-Once the cache is set up, the simplest way to use caching is to cache your entire site. 
-You’ll need to add 'django.middleware.cache.UpdateCacheMiddleware' and 
'django.middleware.cache.FetchFromCacheMiddleware'

--------------------------------------------------------------------
2)THE PER-VIEW CACHE :
---------------------
-The more granular way to use the caching framework is by caching the output of 
individual views.

"""
from django.views.decorators.cache import cache_page

@cache_page(60*15)
or
@cache_page(timeout,cache,key_prefix)
or
@cache_page(timeout,cache="some_cache",key_prefix="some_key")
def my_view(request):
    ...
"""
-timeout :The cache timeout in seconds.

-cache : This directs the decorator to use a specific cache (from your CACHES setting)
when caching view results.By results,the default,the default cache will be used.

-key_refix:you can also override the cache prefix on a per-view basis.
-It works in the the same way as the CACHE_MIDDLEWARE_KEY_PREFIX setting for the the 
middleware.


IN URL:
---------
from django.views.decorators.cache import cache_page

stx:
----
urlpattern=[
      path("rout/",cache_page(timeout,cache,key_prefix)(view_function),
]

ex:
----
urlpattern=[
      path("home/",cache_page(60)(views.home),name="home")
]

--------------------------------------------------------------------
3)TEMPLATE FRAGMENT CACHE (88):
--------------------------
-If you’re after even more control, you can also cache template fragments using the cache 
template tag. 
-To give your template access to this tag, put {% load cache %} near the top of your template.

-The {% cache %} template tag caches the contents of the block for a given amount of time. 
-It takes at least two arguments: the cache timeout, in seconds, and the name to give the 
cache fragment but name cannot be the variable. 
-The fragment is cached forever if timeout is None. The name will be taken as is, do not use 
a variable. 
-using - The cache tag will ry to use the given cache.If no such cache exists, it will fall back 
to using the default cache. 
You may select an alternate cache backend to use with the using keyword argument, which must be 
the last argument to the tag.


stx:
-----
{% cache timeout name variable using-" "%}
  .................
{% endcache name%}



For example:
------------
1){% load cache %}
{% cache 500 sidebar %}
    .. sidebar ..
{% endcache %}


2){% load cache %}
{% cache 500 sidebar request.user.username using="localcache" %}
    .. sidebar ..
{% endcache %}
-here,request.user.username is the current user
-It will use localcache if its available othewise it will go to the default.


-------------------------------------------------------------------
DATABASE CACHING :
-----------------
-Django can store its cached dats in your database. 
-This works best iffyou've got fast, well-indexced dutabase.

CACHES={
       ‘default’:{
              "BACKEND":"django.core.cache.backends.db.DatabaseCache",
               LOCATION":"my_cache_table"
                }    
}
-here table is the name of the databse table.This name can be whatever you want,as long as 
its a valid table name thats not already being used in your database.
-Before using  the dayabse cache,you must create the cache table with this command 
python manage.py createcachetable

-This creates a table in your database that sin the proper format that Django's database-cache 
system expects. 
-The name of the able is taken from LOCATION.

-If you are using multiple database caches, createcachetable creates one table for cach cache.

---------------------------------------------------------------------------------
LOW-LEVEL CACHE API :
---------------------
-Sometimes, caching an entire rendered page doesn’t gain you very much and is, 
in fact, inconvenient overkill.
-Perhaps, for instance, your site includes a view whose results depend on several 
expensive queries, the results of which change at different intervals. 

-In this case, it would not be ideal to use the full-page caching that the per-site 
or per-view cache strategies offer, because you wouldn’t want to cache the entire result 
(since some of the data changes often), but you’d still want to cache the results that 
rarely change.

-For cases like this, Django exposes a low-level cache API. 
-You can use this API to store objects in the cache with any level of granularity you 
like. 
-You can cache any Python object that can be pickled safely: strings, dictionaries, 
lists of model objects, and so forth.


IMPLIMENTATION :
----------------
1)SETTING CACHE:
-----------------
-django.core.cache.caches
-cache.set(key, value, timeout=DEFAULT_TIMEOUT, version=None)
-key should be a str, and value can be any picklable Python object.
-The timeout argument is optional and defaults to the timeout argument of the appropriate 
backend in the CACHES setting (explained above). 
-It’s the number of seconds the value should be stored in the cache. 
-Passing in None for timeout will cache the value forever. 
-A timeout of 0 won’t cache the value.
-version :It is an int.You can set cache with same key but different version.



2)GETTING A CACHE :
------------------
-cache.get(key,default=NONE,version=NONE)
-If the object doesn’t exist in the cache, cache.get() returns None:
-

3)ADD CACHE :
-------------
-cache.add(key, value, timeout=DEFAULT_TIMEOUT, version=None)
-To add a key only if it doesn’t already exist, use the add() method. 
-It takes the same parameters as set(), but it will not attempt to update the cache if 
the key specified is already present:

-If you need to know whether add() stored a value in the cache, you can check the return 
value. 
-It will return True if the value was stored, False otherwise.


4)cache.get_or_set(key, default, timeout=DEFAULT_TIMEOUT, version=None)
-This method is used to get a key's value or set a value if the key isn't in the cache.
-If you want to get a key’s value or set a value if the key isn’t in the cache, 
there is the get_or_set() method. 
-It takes the same parameters as get() but the default is set as the new cache value 
for that key, rather than returned:
-You can also pass any collable value as a fefault value.


5)cache.set_many(dict, timeout)
-To set multiple values more efficiently, use set_many() to pass a dictionary of 
key-value pairs:


6)cache.get_many(keys, version=None)
-There’s also a get_many() interface that only hits the cache once. 
-get_many() returns a dictionary with all the keys you asked for that actually 
exist in the cache (and haven’t expired):

7)cache.delete(key, version=None):
-You can delete keys explicitly with delete() to clear the cache for a particular 
object:
-delete() returns True if the key was successfully deleted, False otherwise.


8)cache.delete_many(keys, version=None)
-If you want to clear a bunch of keys at once, delete_many() can take a list of keys 
to be cleared:

9)cache.clear():
-Finally, if you want to delete all the keys in the cache, use cache.clear(). 
-Be careful with this; clear() will remove everything from the cache, not just the 
keys set by your application. :


10)cache.touch(key, timeout=DEFAULT_TIMEOUT, version=None)
-cache.touch() sets a new expiration for a key. 
-For example, to update a key to expire 10 seconds from now:

>>> cache.touch("a", 10)
True


11)cache.incr(key, delta=1, version=None)
cache.decr(key, delta=1, version=None)
-You can also increment or decrement a key that already exists using the incr() or 
decr() methods, respectively. 
-By default, the existing cache value will be incremented or decremented by 1. 
-Other increment/decrement values can be specified by providing an argument to the 
increment/decrement call. 
-A ValueError will be raised if you attempt to increment or decrement a nonexistent 
cache key:

ex:
----
>>> cache.set("num", 1)
>>> cache.incr("num")
2
>>> cache.incr("num", 10)
12
>>> cache.decr("num")
11
>>> cache.decr("num", 5)
6


12)cache.close():
-You can close the connection to your cache with close() if implemented by the cache 
backend.
ex:
>>> cache.close()


=========================================================================================
MIDDLEWARE :
------------
-Middleware is a framework of hooks into Django’s request/response processing. 
-It’s a light, low-level “plugin” system for globally altering Django’s input or output.
-Each middleware component is responsible for doing some specific function.

1)BUILT-IN MIDDLEWARE :
----------------------
-
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

-

2)CUSTOM MIDDLEWARE :
---------------------
a)FUNCTION BASED MIDDLEWARE :
-----------------------------
-A middleware factory is a callable that takes a get_response callable and returns a 
middleware. 
-A middleware is a callable that takes a request and returns a response, just like a view.

ex:
---
def simple_middleware(get_response):
    # One-time configuration and initialization.

    def middleware(request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response

    return middleware

-The get_response callable provided by Django might be the actual view (if this is the 
last listed middleware) or it might be the next middleware in the chain. 
-The current middleware doesn’t need to know or care what exactly it is, just that it 
represents whatever comes next.

-The get_response callable for the last middleware in the chain won’t be the actual 
view but rather a wrapper method from the handler which takes care of applying view 
middleware, calling the view with appropriate URL arguments, and applying 
template-response and exception middleware.

-Middleware can live anywhere on your Python path.


ACTIVATING MIDDLEWARE :
----------------------
-In MIDDLEWARE, each middleware component is represented by a string: the full Python 
path to the middleware factory’s class or function name.

-The order in MIDDLEWARE matters because a middleware can depend on other middleware. 
-For instance, AuthenticationMiddleware stores the authenticated user in the session; 
therefore, it must run after SessionMiddleware.

MIDDLEWARE=[
       .
       .
       "app.middleware.my_middleware"
       .
       .
]

-by writting middleware,always maintain the order.


b)CLASS BASED MIDDLEWARE :
--------------------------
-

=========================================================================================
QUERYSET API:
--------------
-A QuerySet an b defined as a list containing all those objects we have created using the 
Django model.
-QuerySets allow you to read he data from the database, filter it and onder it.

# query property :
-----------------
-This property is used to get sql query of query set.
Syntax: queryset.query


METHOD THAT RETURNS NEW QUERYSETS:
----------------------------------
1)all()

2)exclude :
-std=Student.objects.exclude(city="pune")

3)filter:
-std=Student.objects.filter(marks__gt=80)
-std=Student.objects.filter(city="pune")

4)values():
-----------
-values(*fields, **expressions)
-Returns a QuerySet that returns dictionaries, rather than model instances, when used 
as an iterable.
-Each of those dictionaries represents an object, with the keys corresponding to the 
attribute names of model objects.


5)distinct(*fields):
-It eliminates duplicates rows from the query results.


6)values_list():
-------------------
-values_list(*fields, flat=False, named=False)
-This is similar to values() except that instead of returning dictionaries, it returns 
tuples when iterated over. 
-Each tuple contains the value from the respective field or expression passed into the 
values_list() call — so the first item is the first field, etc.

a)If you only pass in a single field, you can also pass in the flat parameter. 
-If True, this will mean the returned results are single values, rather than one-tuples.

b)You can pass named=True to get results as a namedtuple():

c)If you don’t pass any values to values_list(), it will return all the fields in the 
model, in the order they were declared.

7)using():
------------
-using(alias)
-This method is for controlling which database the QuerySet will be evaluated against 
if you are using more than one database. 
-The only argument this method takes is the alias of a database, as defined in DATABASES.

8)dates(field, kind, order='ASC')
-----------------------------------
-Returns a QuerySet that evaluates to a list of datetime.date objects representing all 
available dates of a particular kind within the contents of the QuerySet.
-"field" should be the name of a DateField of your model. kind should be either "year", 
"month", "week", or "day". 

-Each datetime.date object in the result list is “truncated” to the given type.

-"year" returns a list of all distinct year values for the field.
-"month" returns a list of all distinct year/month values for the field.
-"week" returns a list of all distinct year/week values for the field. 
All dates will be a Monday.
-"day" returns a list of all distinct year/month/day values for the field.
-order, which defaults to 'ASC', should be either 'ASC' or 'DESC'. 

9)none():
------------
-Calling none() will create a queryset that never returns any objects and no query will 
be executed when accessing the results.
-A qs.none() queryset is an instance of EmptyQuerySet.

10)union():
------------
-union(*other_qs, all=False)
-Uses SQL’s UNION operator to combine the results of two or more QuerySets. 

For example:
>>> qs1.union(qs2, qs3)
-The UNION operator selects only distinct values by default. 
To allow duplicate values, use the all=True argument.

11)intersection(*other_qs):
--------------------------------
-Uses SQL’s INTERSECT operator to return the shared elements of two or more QuerySets. 

For example:
>>> qs1.intersection(qs2, qs3)

12)difference(*other_qs):
---------------------------
-Uses SQL’s EXCEPT operator to keep only elements present in the QuerySet but not in 
some other QuerySets. 

For example:
>>> qs1.difference(qs2, qs3)


13)select_realted(*fields)
14)defer(*fields)
15)only(*fields)
16)prefetch_related(*fields)
17)extra(select=None, where=None, 
params=None, tables=None, order_by=None, select_params=None)

18)select_for_update(nowait=False, skip_locked=False, of=(), no_key=False)
19)raw(raw_query, params=(), translations=None, using=None)
20)annotate(*args,**kwargs)

---------------------------------------------------------
OPERATOR THAT RETURNS NEW QUERYSETS :
-------------------------------------
1)AND (&):
-----------
-Combines two QuerySets using the SQL AND operator in a manner similar to chaining 
filters.
-The following are equivalent:
Model.objects.filter(x=1) & Model.objects.filter(y=2)
Model.objects.filter(x=1).filter(y=2)
Model.obejcts.filter(id=1,roll=2)
Model.obejcts.filter(Q(id=1) & (roll=2))


2)OR (|):
----------
-Combines two QuerySets using the SQL OR operator.

The following are equivalent:
Model.objects.filter(x=1) | Model.objects.filter(y=2)

from django.db.models import Q
Model.objects.filter(Q(x=1) | Q(y=2))


3)XOR (^)
----------
-New in Django 4.1.
-Combines two QuerySets using the SQL XOR operator.

The following are equivalent:
Model.objects.filter(x=1) ^ Model.objects.filter(y=2)

from django.db.models import Q
Model.objects.filter(Q(x=1) ^ Q(y=2))

-------------------------------------------------------------------
METHOD THAT DO NOT RETURNS NEW QUERYSETS:
-----------------------------------------
1)get()

2)first():
-afirst()
-Asynchronous version: afirst()
-Returns the first object matched by the queryset, or None if there is no matching 
object. 
-If the QuerySet has no ordering defined, then the queryset is automatically ordered 
by the primary key. 
-This can affect aggregation results as described in Interaction with order_by().

3)last()

4)latest(*fields):
---------------------
-alatest(*fields)
-Asynchronous version: alatest()
-Returns the latest object in the table based on the given field(s).
-This example returns the latest Entry in the table, according to the pub_date field:

5)earliest(*fields)
-aearliest(*fields)
-Asynchronous version: aearliest()
-Works otherwise like latest() except the direction is changed.

6)exists()
-aexists()
-Asynchronous version: aexists()
-Returns True if the QuerySet contains any results, and False if not. 
-This tries to perform the query in the simplest and fastest way possible, but it does 
execute nearly the same query as a normal QuerySet query.

-exists() is useful for searches relating to the existence of any objects in a QuerySet, 
particularly in the context of a large QuerySet.


7)create(**kwargs)
-acreate(**kwargs)
-Asynchronous version: acreate()
-A convenience method for creating an object and saving it all in one step.

8)get_or_create(defaults=None, **kwargs)
-aget_or_create(defaults=None, **kwargs)
-Asynchronous version: aget_or_create()
-A convenience method for looking up an object with the given kwargs (may be empty if 
your model has defaults for all fields), creating one if necessary.

-Returns a tuple of (object, created), where object is the retrieved or created object 
and created is a boolean specifying whether a new object was created.
-This is meant to prevent duplicate objects from being created when requests are made in 
parallel, and as a shortcut to boilerplatish code. 

9)update(**kwargs):
--------------------
-aupdate(**kwargs)
-Asynchronous version: aupdate()

-Performs an SQL update query for the specified fields, and returns the number of rows 
matched (which may not be equal to the number of rows updated if some rows already 
have the new value).

10)update_or_create(defaults=None, **kwargs):
----------------------------------------------
-aupdate_or_create(defaults=None, **kwargs)
-Asynchronous version: aupdate_or_create()
-A convenience method for updating an object with the given kwargs, creating a new one 
if necessary. 
-The defaults is a dictionary of (field, value) pairs used to update the object. 
-The values in defaults can be callables.
-Returns a tuple of (object, created), where object is the created or updated object 
and created is a boolean specifying whether a new object was created.
-The update_or_create method tries to fetch an object from database based on the given 
kwargs. 
-If a match is found, it updates the fields passed in the defaults dictionary.

11)bulk_create():
---------------------
-bulk_create(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, 
update_fields=None, unique_fields=None)

-abulk_create(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, 
update_fields=None, unique_fields=None)

-Asynchronous version: abulk_create()

-This method inserts the provided list of objects into the database in an efficient 
manner (generally only 1 query, no matter how many objects there are), and returns 
created objects as a list, in the same order as provided:

-This has a number of caveats though:
-------------------------------------
a)The model’s save() method will not be called, and the pre_save and post_save signals 
will not be sent.

b)It does not work with child models in a multi-table inheritance scenario.

c)If the model’s primary key is an AutoField, the primary key attribute can only be 
retrieved on certain databases (currently PostgreSQL, MariaDB 10.5+, and SQLite 3.35+). 
On other databases, it will not be set.

d)It does not work with many-to-many relationships.

e)It casts objs to a list, which fully evaluates objs if it’s a generator. 
-The cast allows inspecting all objects so that any objects with a manually set primary 
key can be inserted first. 
-If you want to insert objects in batches without evaluating the entire generator at 
once, you can use this technique as long as the objects don’t have any manually set 
primary keys:


12)bulk_update():
-bulk_update(objs, fields, batch_size=None)
-abulk_update(objs, fields, batch_size=None)
-Asynchronous version: abulk_update()

-This method efficiently updates the given fields on the provided model instances, 
generally with one query, and returns the number of objects updated:
-QuerySet.update() is used to save the changes, so this is more efficient than iterating 
through the list of models and calling save() on each of them,but it has a few caveats:

a)You cannot update the model’s primary key.

b)Each model’s save() method isn’t called, and the pre_save and post_save signals aren’t 
sent.
c)If updating a large number of columns in a large number of rows, the SQL generated can 
be very large. Avoid this by specifying a suitable batch_size.

d)Updating fields defined on multi-table inheritance ancestors will incur an extra query 
per ancestor.

e)When an individual batch contains duplicates, only the first instance in that batch will
result in an update.

f)The number of objects updated returned by the function may be fewer than the number of 
objects passed in. 
-This can be due to duplicate objects passed in which are updated in the same batch or 
race conditions such that objects are no longer present in the database.

-The batch_size parameter controls how many objects are saved in a single query. 
-The default is to update all objects in one batch, except for SQLite and Oracle which 
have restrictions on the number of variables used in a query.


13)delete():
-adelete()
-Asynchronous version: adelete()

-Performs an SQL delete query on all rows in the QuerySet and returns the number of 
objects deleted and a dictionary with the number of deletions per object type.
-The delete() is applied instantly. You cannot call delete() on a QuerySet that has had 
a slice taken or can otherwise no longer be filtered.


14)count():
------------
-acount()
-Asynchronous version: acount()
-Returns an integer representing the number of objects in the database matching the 
QuerySet.
-


15)explain():
---------------
-explain(format=None, **options)
-aexplain(format=None, **options)
-Asynchronous version: aexplain()

-Returns a string of the QuerySet’s execution plan, which details how the database would 
execute the query, including any indexes or joins that would be used. 
-Knowing these details may help you improve the performance of slow queries.


16)aggregate()
-----------------
-aggregate(*args, **kwargs)
-aaggregate(*args, **kwargs)
-Asynchronous version: aaggregate()

-Returns a dictionary of aggregate values (averages, sums, etc.) calculated over the 
QuerySet. 
-Each argument to aggregate() specifies a value that will be included in the dictionary 
that is returned.
-The aggregation functions that are provided by Django are described in Aggregation 
Functions below. 
-Since aggregates are also query expressions, you may combine aggregates with other 
aggregates or values to create complex aggregates.
-Aggregates specified using keyword arguments will use the keyword as the name for the 
annotation. 
-Anonymous arguments will have a name generated for them based upon the name of the 
aggregate function and the model field that is being aggregated. 
-Complex aggregates cannot use anonymous arguments and must specify a keyword argument 
as an alias.


17)as_manager()
18)iterator(chunk_size=2000)

-----------------------------------------------------------------
FIELD LOOKUPS :
---------------
-Field lookups are how you specify the meat of an SQL WHERE clause. 
-They’re specified as keyword arguments to the QuerySet methods filter(), exclude() and 
get().

-If you pass an invalid keyword argument,a lookup function will reaise TypeError.
stx:field_lookup=value.

1)exact :
----------
-Exact match. If the value provided for comparison is None, it will be interpreted as an 
SQL NULL (see isnull for more details).

Examples:
----------
Entry.objects.get(id__exact=14)
Entry.objects.get(id__exact=None)


2)iexact :
-----------
-Case-insensitive exact match. 
-If the value provided for comparison is None, it will be interpreted as an SQL NULL 
(see isnull for more details).

3)contains:
------------
-Case-sensitive containment test.

Example:
Entry.objects.get(headline__contains="Lennon")


4)icontains:
-----------------
-Case-insensitive containment test.

Example:
Entry.objects.get(headline__icontains="Lennon")


5)gt,gte,lt,lte
6)startswith :this is case-sensitive
7)istartswith :this is caseinsensitive
8)endswith :this is case-sensitive
9)iendswith :this is caseinsensitive

10)in :
---------
-In a given iterable; often a list, tuple, or queryset. 
It’s not a common use case, but strings (being iterables) are accepted.

Examples:
Entry.objects.filter(id__in=[1, 3, 4])
Entry.objects.filter(headline__in="abc")


11)range:
----------
Range test (inclusive).

Example:
----------
import datetime
start_date = datetime.date(2005, 1, 1)
end_date = datetime.date(2005, 3, 31)
Entry.objects.filter(pub_date__range=(start_date, end_date))


12)date:
----------
-For datetime fields, casts the value as date. Allows chaining additional field lookups. 
-Takes a date value.

Example:
---------
Entry.objects.filter(pub_date__date=datetime.date(2005, 1, 1))
Entry.objects.filter(pub_date__date__gt=datetime.date(2005, 1, 1))


13)year :
----------
-For date and datetime fields, an exact year match. 
-Allows chaining additional field lookups. Takes an integer year.

Example:
---------
Entry.objects.filter(pub_date__year=2005)
Entry.objects.filter(pub_date__year__gte=2005)

SQL equivalent:
------------------
SELECT ... WHERE pub_date BETWEEN '2005-01-01' AND '2005-12-31';
SELECT ... WHERE pub_date >= '2005-01-01';


14)month:
---------
-For date and datetime fields, an exact month match. 
Allows chaining additional field lookups. Takes an integer 1 (January) through 12 
(December).

Example:
----------
Entry.objects.filter(pub_date__month=12)
Entry.objects.filter(pub_date__month__gte=6)

SQL equivalent:
----------------
SELECT ... WHERE EXTRACT('month' FROM pub_date) = '12';
SELECT ... WHERE EXTRACT('month' FROM pub_date) >= '6';

15)day:
-------
-For date and datetime fields, an exact day match. 
Allows chaining additional field lookups. Takes an integer day.

Example:
--------
Entry.objects.filter(pub_date__day=3)
Entry.objects.filter(pub_date__day__gte=3)

SQL equivalent:
----------------
SELECT ... WHERE EXTRACT('day' FROM pub_date) = '3';
SELECT ... WHERE EXTRACT('day' FROM pub_date) >= '3';

16)week :
------------
-For date and datetime fields, return the week number (1-52 or 53) according to 
ISO-8601, i.e., weeks start on a Monday and the first week contains the year’s first 
Thursday.

Example:
---------
Entry.objects.filter(pub_date__week=52)
Entry.objects.filter(pub_date__week__gte=32, pub_date__week__lte=38)


17)week_day
------------
-For date and datetime fields, a ‘day of the week’ match. 
-Allows chaining additional field lookups.
-Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday).

Example:
---------
Entry.objects.filter(pub_date__week_day=2)
Entry.objects.filter(pub_date__week_day__gte=2)


18)quarter :
-------------
-For date and datetime fields, a ‘quarter of the year’ match. 
-Allows chaining additional field lookups. 
-Takes an integer value between 1 and 4 representing the quarter of the year.

Example to retrieve entries in the second quarter (April 1 to June 30):
--------------------------------------
Entry.objects.filter(pub_date__quarter=2)


19)time :
---------
-For datetime fields, casts the value as time. 
Allows chaining additional field lookups. Takes a datetime.time value.

Example:
---------
Entry.objects.filter(pub_date__time=datetime.time(14, 30))
Entry.objects.filter(pub_date__time__range=(datetime.time(8), datetime.time(17)))


20)hour :
---------
-For datetime and time fields, an exact hour match. 
Allows chaining additional field lookups. Takes an integer between 0 and 23.

Example:
--------
Event.objects.filter(timestamp__hour=23)
Event.objects.filter(time__hour=5)
Event.objects.filter(timestamp__hour__gte=12)


21)minute :
------------
-For datetime and time fields, an exact minute match. 
Allows chaining additional field lookups. Takes an integer between 0 and 59.

Example:
----------
Event.objects.filter(timestamp__minute=29)
Event.objects.filter(time__minute=46)
Event.objects.filter(timestamp__minute__gte=29)

SQL equivalent:
-----------------
SELECT ... WHERE EXTRACT('minute' FROM timestamp) = '29';
SELECT ... WHERE EXTRACT('minute' FROM time) = '46';
SELECT ... WHERE EXTRACT('minute' FROM timestamp) >= '29';


22)second
----------
-For datetime and time fields, an exact second match. 
-Allows chaining additional field lookups. Takes an integer between 0 and 59.

Example:
-----------
Event.objects.filter(timestamp__second=31)
Event.objects.filter(time__second=2)
Event.objects.filter(timestamp__second__gte=31)

SQL equivalent:
----------------
SELECT ... WHERE EXTRACT('second' FROM timestamp) = '31';
SELECT ... WHERE EXTRACT('second' FROM time) = '2';
SELECT ... WHERE EXTRACT('second' FROM timestamp) >= '31';


23)isnull :
------------
-Takes either True or False, which correspond to SQL queries of IS NULL and IS NOT NULL, 
respectively.

Example:
---------
Entry.objects.filter(pub_date__isnull=True)

SQL equivalent:
-----------------
SELECT ... WHERE pub_date IS NULL;



24)regex :
-----------
-Case-sensitive regular expression match.
-The regular expression syntax is that of the database backend in use. 
-In the case of SQLite, which has no built in regular expression support, this feature is 
provided by a (Python) user-defined REGEXP function, and the regular expression syntax is 
therefore that of Python’s re module.

Example:
--------
Entry.objects.get(title__regex=r"^(An?|The) +")

SQL equivalents:
------------------
SELECT ... WHERE title REGEXP BINARY '^(An?|The) +'; -- MySQL

SELECT ... WHERE REGEXP_LIKE(title, '^(An?|The) +', 'c'); -- Oracle

SELECT ... WHERE title ~ '^(An?|The) +'; -- PostgreSQL

SELECT ... WHERE title REGEXP '^(An?|The) +'; -- SQLite
Using raw strings (e.g., r'foo' instead of 'foo') for passing in the regular expression 
syntax is recommended.

-------------------------------------------------------------------------------
iregex :
--------
-Case-insensitive regular expression match.

Example:
-----------------
Entry.objects.get(title__iregex=r"^(an?|the) +")
SQL equivalents:

SELECT ... WHERE title REGEXP '^(an?|the) +'; -- MySQL

SELECT ... WHERE REGEXP_LIKE(title, '^(an?|the) +', 'i'); -- Oracle

SELECT ... WHERE title ~* '^(an?|the) +'; -- PostgreSQL

SELECT ... WHERE title REGEXP '(?i)^(an?|the) +'; -- SQLite

------------------------------------------------------------------------
AGGREGATIONS :
-------------
a)Avg :
--------
-classAvg(expression, output_field=None, distinct=False, filter=None, default=None, 
**extra)
-Returns the mean value of the given expression, which must be numeric unless you 
specify a different output_field.

-Default alias: <field>__avg
Return type: float if input is int, otherwise same as input field, or output_field 
if supplied

-distinct:
-------------
-Optional. If distinct=True, Avg returns the mean value of unique values. 
-This is the SQL equivalent of AVG(DISTINCT <field>). The default value is False.

b)Count :
----------
-class Count(expression, distinct=False, filter=None, **extra)
-Returns the number of objects that are related through the provided expression. 
-Count('*') is equivalent to the SQL COUNT(*) expression.

-Default alias: <field>__count
-Return type: int

-distinct
----------
Optional. If distinct=True, the count will only include unique instances. 
-This is the SQL equivalent of COUNT(DISTINCT <field>). The default value is False.

c)Max :
----------
-class Max(expression, output_field=None, filter=None, default=None, **extra)
-Returns the maximum value of the given expression.

-Default alias: <field>__max
-Return type: same as input field, or output_field if supplied

d)Min :
-------
-class Min(expression, output_field=None, filter=None, default=None, **extra)
-Returns the minimum value of the given expression.

-Default alias: <field>__min
-Return type: same as input field, or output_field if supplied


e)StdDev :
-----------
-class StdDev(expression, output_field=None, sample=False, filter=None, default=None, 
**extra)
-Returns the standard deviation of the data in the provided expression.

-Default alias: <field>__stddev
-Return type: float if input is int, otherwise same as input field, or output_field if 
supplied

-sample :
------------
-Optional. By default, StdDev returns the population standard deviation. 
However, if sample=True, the return value will be the sample standard deviation.

g)Sum :
-------- 
-class Sum(expression, output_field=None, distinct=False, filter=None, default=None, 
**extra)
-Computes the sum of all values of the given expression.

-Default alias: <field>__sum
-Return type: same as input field, or output_field if supplied

-distinct :
-----------
-Optional. If distinct=True, Sum returns the sum of unique values. 
This is the SQL equivalent of SUM(DISTINCT <field>). The default value is False.


h)Variance :
-------------
-class Variance(expression, output_field=None, sample=False, filter=None, default=None, 
**extra)
-Returns the variance of the data in the provided expression.

-Default alias: <field>__variance
-Return type: float if input is int, otherwise same as input field, or output_field if supplied

-sample :
-Optional. By default, Variance returns the population variance. 
-However, if sample=True, the return value will be the sample variance.

-----------------------------------------------------------------------
Q OBJECT :
-----------
-Q() objects 
-class Q 
-A Q() object represents an SQL condition that can be used in database-related 
operations. 
-It’s similar to how an F() object represents the value of a model field or annotation. 
-They make it possible to define and reuse conditions, and combine them using operators 
such as | (OR), & (AND), and ^ (XOR).

=========================================================================================


=========================================================================================


=========================================================================================



=========================================================================================



=========================================================================================



=========================================================================================
=========================================================================================